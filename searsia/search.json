{
  "hits": [
    {
      "title": "Searsia",
      "url": "http:\/\/searsia.org\/",
      "description": "Build a beautiful search engine: Searsia is a protocol and implementation for large scale federated web search."
    },
    {
      "title": "Searsia - About",
      "url": "http:\/\/searsia.org\/about.html",
      "description": "Today's web search engines need to combine search results from many independent sources, such as results from a Web crawl, from Advertisements, from Video's, Books, News, Shopping, etc. Many advanced features of such search engines might be seen as \"sources\" too, such as query autocompletion, related queries, spelling correction (\"Did you mean:\"), and instant answers: These features receive a query and return some data (a completed query, a related query, a corrected query, etc.) Searsia provides an approach to search that: Manages and shares large collections of independent sources. Selects for each query the most relevant sources. Combines sources in an aggregated search interface. Learns over time what kind of information each source provides. Searsia is demonstrated by UTwente Search , an enterprise search engine for the University of Twente that combines the results of about 35 sources, including results from Google's web crawl, from Courses, from News, the Telephone directory, the Timetables, as well as results from social media, such as Facebook, Twitter and Flickr. Search by Searsia   Next: Start using Searsia ."
    },
    {
      "title": "Searsia - Engines",
      "url": "http:\/\/searsia.org\/engines.html",
      "description": "To see a list of all resources (search engines) that are used by your server, open settings.html in your client. This will show a table with resources, about 25 if you connect to the University of Twente Searsia server. In the list of resources, one of the search engines is the University of Twente Searsia server. We will call this resource the 'mother': It is the search engine that is fully trusted, like you would trust your mother. A client (or another) server will copy all the resources from its mother. This way, configurations can be quickly shared, and a copy of --for instance-- the University of Twente Searsia server can be quickly instantiated. To enable updates, start the (mother) server with the --open option. (BEWARE: This will enable anyone to update your server. Searsia does not support authentication at the moment.) To add a resource, click on the \"+Add\" button on the bottom of the settings.html page. To add a Searsia resource (an engine that implements the Searsia protocol, returning results of mime-type application\/searsia+json ), enter a unique Identifier ( Id ), and the resource' API template . The Id should be unique in your server. The API template is the url of the resource, where the query is replaced by {q} or {q?} (where the question mark should be used if the query is optional). After clicking \"Update\", the server tests the resource. A pop-up window appears with the results of the test, and a message explaining whether the resource is added or not. The server can get search results by scraping the HTML that search engines return for their end users. To add an HTML resource, use text\/html in the field Mime type . As the field API Template , take the resource' URL from your browser after querying the search engine, replacing the query in the url by {q} . If the URL does not contain a query, the search engine probably uses a POST request . To find out what the POST request is, we recommend Live HTTP Headers for Firefox. Put the POST string, replacing the query by {q} in the field Post string . Searsia uses XPath 1.0 to extract the search results from the web page. XPath is a query language for selecting elements of semi-structured data. Suppose the search results are displayed as list elements on the page, then these are encode as <li> ... <\/li> on the page, and they can be extracted from the page with the XPath query \/\/li . To find the most likely XPath query, we recommend Search Result Finder for Firefox. Fill in the XPath query in the field Item XPath . To tell Searsia how to extract the components of the search result, add XPaths for the fields title , description , link , or any other field you like (the client also supports image ). To add an XML resource, fill in application\/xml in the field Mime type . Then proceed as above . The Firefox Search Result Finder cannot be used in this case. To add a JSON resource, fill in application\/json in the field Mime type . Searsia also uses XPath queries to interpret JSON output, by internally converting JSON to XML, where each JSON attribute name is converted to an XML element; JSON lists are converted to repeated XML elements with the JSON list's name. Searsia supports many API's by including API keys as secret parameters that will not be shared, as well the possibility to add custom HTTP headers . Look at the University of Twente settings for examples of Searsia's resource configurations, including several examples that use HTML scrapers, and examples for accessing the API's of Google, Twitter, Facebook, Flickr, Instagram, and more. If you believe that Searsia is unable to get search results from an existing resource that should be supported, please post your question under Searsia Server Issues . Please, note that Searsia is not meant to scrape sites that do not want to be scraped, and therefore does not contain ways to circumvent for instance session cookies. While the Searsia resource configurations provide a way to get the search results for..."
    },
    {
      "title": "Searsia - People",
      "url": "http:\/\/searsia.org\/people.html",
      "description": "The following people contributed to researching and developing Searsia: Djoerd Hiemstra Dolf Trieschnigg Dong Nguyen Thomas Demeester Ke Zhou Rob Stortelder Almer Tigelaar Searsia logo logo by rMiszczak"
    },
    {
      "title": "Searsia - Protocol",
      "url": "http:\/\/searsia.org\/protocol.html",
      "description": "Searsia is designed such that each Searsia server manages multiple resources. These resources can be existing web search engines, or they can be other Searsia servers. A Searsia server has a single API query interface, which is shared with other servers (and clients) by means of an API template. For instance, the API template of the University of Twente search engine is: https:\/\/search.utwente.nl\/searsia\/search?q={q?}&r={r?} A search in Searsia typically follows the following stages: The client first calls the Searsia server with only a query . The server returns search results, some (or all) of which were previously found by the server's resources. The client may present the search results, or get even better search results as follows; The client may call the server with the query and the resource idenfitier to request the server to forward the query to the resources that previously found the search results, or; The client may query the resource directly after requesting the server for the resource's contact details . A call to the server with only a query returns the server's local search results. For instance, for the query searsia , the University of Twente API: https:\/\/search.utwente.nl\/searsia\/search?q=searsia&r= produces a result that is similar to one below: { \"hits\": [ { \"title\": \"Searsia\", \"description\": \"Search for noobs\", \"score\": 3.319267, \"url\": \"http:\\/\\/searsia.org\" }, { \"rid\": \"googlecustom\", \"title\": \"Projecten | Organisatie\", \"description\": \"UT Search is powered by Searsia ...\", \"score\": 2.9963183, \"url\": \"https:\\/\\/www.utwente.nl\\/organisatie\\/nieuws-events\\/dossier\\/&#8230;\" }, { \"rid\": \"publications\", \"score\": 2.0 } ], \"resource\": { \"id\": \"utwente\", \"mimetype\": \"application\\/searsia+json\", \"urltemplate\": \"https:\\/\\/search.utwente.nl\\/search.html?q={q}\", \"favicon\": \"https:\\/\\/search.utwente.nl\\/ut-icons\\/ut.png\", \"testquery\": \"twente\", \"name\": \"University of Twente\", \"prior\": 2, \"apitemplate\": \"https:\\/\\/search.utwente.nl\\/searsia\\/search?q={q?}&r={r?}\", \"banner\": \"https:\\/\\/search.utwente.nl\\/ut-icons\\/utlogo-black.png\" }, \"searsia\": \"v0.3.0\" } The attribute \"hits\" contains search results that may have an attribute \"rid\" , which is the resource identifier of the resource that produced the result for a previous search. Searsia ranks the results such that the resource identifiers are ranked by the relevance of the resources to the query. The attribute \"resource\" contains information about the server, such as its name and icon. The attribite \"searsia\" contains the version number of the server. Based on this results, the client may now decide to ask the server to forward the query to \"googlecustom\" and \"publications\" , which is done as follows: A call to the server with a query and a resource identifier will let the server forward the query to the resource. For instance, for the query searsia , a call to the University of Twente API: https:\/\/search.utwente.nl\/searsia\/search?q=searsia&r=publications produces a result that is similar to one below: { \"hits\": [ { \"title\": \"Searsia Documentation\", \"description\": \"Djoerd Hiemstra, Dolf Trieschnigg, Thomas Demeester, ...\", \"url\": \"http:\\/\\/doc.utwente.nl\\/970499\\/\" } ], \"resource\": { \"id\": \"publications\", \"mimetype\": \"text\\/html\", \"urltemplate\": \"http:\\/\\/doc.utwente.nl\\/cgi\\/search\\/archive\\/simple?q={q}\", \"favicon\": \"http:\\/\\/doc.utwente.nl\\/style\\/images\\/fileicons\\/pdf.png\", \"itempath\": \"\\/\\/div[@id='content']\\/div\\/table\\/tbody\\/tr[.\\/td\\/span\\/a]\", \"extractors\": { \"title\": \"(.\\/\\/a)[1]\", \"description\": \".\", \"image\": \"(.\\/\\/img)[last()]\\/@src\", \"url\": \".\\/\\/@href\" }, \"testquery\": \"test\", \"name\": \"Publications\", \"prior\": 1, \"apitemplate\": \"http:\\/\\/doc.utwente.nl\\/cgi\\/search\\/archive\\/simple?q={q}\" }, \"searsia\": \"v0.3.0\" } The attribute \"hits\" contains search results of the resource \"publications\" . The attribute \"resource\" contains contact information for the Publications search engine. In some cases additional information such as API keys..."
    },
    {
      "title": "Results Demo",
      "url": "http:\/\/searsia.org\/resultsdemo.html",
      "description": "This is a mockup for demonstration purposes: A search for the query informat shows 7 presentations of the same Wikipedia search results."
    },
    {
      "title": "Searsia - Search",
      "url": "http:\/\/searsia.org\/search.html",
      "description": "Search searsia.org"
    },
    {
      "title": "Searsia - Start",
      "url": "http:\/\/searsia.org\/start.html",
      "description": "Searsia comes with a client and a server. The Searsia Web client can be downloaded as searsiaclient.zip and unzipped on your local machine or web server. To use the web client, open the file index.html in a web browser. Congratulations! You now run your own web application for federated search. The client will automatically connect to the University of Twente search server. To connect to another server, edit the second line in the file js\/searsia.js , which contains the API template of the server. var API_TEMPLATE = 'https:\/\/search.utwente.nl\/searsia\/search?q={q?}&r={r?}' If you run a server on your local machine (see next section), you can connect to your own server by setting the API template to: 'http:\/\/localhost:16842\/searsia\/search?q={q?}&r={r?}' Download the Java server searsiaserver.jar and use the following command to start the server: java -jar searsiaserver.jar The server requires Java 7 or higher. Just like the web client, the java server will automatically connect to the University of Twente search server. The server displays the following message: Searsia Server v0.4.0 Connected to: utwente API Template: http:\/\/localhost:16842\/searsia\/search?q={q?}&r={r?} Use Ctrl+c to stop. Use the reported API Template in your client as explained above to connect. The java server supports several command line options, shown in the following table. For convenience, each option has a short-hand consisting of one hyphen and the first letter of the option, for instance -h for --help . Option Explanation Show help. Takes as argument an integer, which is the poll interval (in seconds). The server sends a random query each interval to a search engine. The default value is 120 seconds. If your server contains 30 resources (search engines), a polling interval of 120 seconds will poll each resource on average once per 120 * 30 = 3600 seconds, so once each 60 minutes, about 24 queries a day. In scientific literature on distributed information retrieval, polling is usually called query-based sampling. An interval of 0 disables polling. type of log messages produced by the server (to the index directory ). Supported levels are: 0 = no logging; 1 = only errors; 2 = errors and warnings; 3 = errors, warnings, and information, 4 = all of level 3 plus debug information. The default level is 2 . Sets the API template of the mother. Use none to run the in stand-alone mode. The default is currently ' https:\/\/search.utwente.nl\/searsia\/search?q={q?}&r={r?} '. Set the id (name) of this end point. The server generates a random string as its name if this setting is not provided. Enable on-line updates. This enables on-line updates for your server by anyone, use this only for testing purposes. Set the path on the file system where the index is stored. The default depends on your operating system. Typically, the index ends up in your home directory under: .local\/share\/searsia if your are on a Linux-based system, under Library\/Application Support\/Searsia if you are on Apple, and under Application Data\/Searsia on many Windows versions. Set the url of the web service endpoint. The default is ' http:\/\/localhost:16842\/searsia\/ ' The server might return the following error messages: The server cannot create the index. Check if the server has write premissions in the reported directory. Use the --path option to change the location of the index. There is already an instance of the Searsia server running on the same index. Kill the server, or run the server with a different name with the --name option. There is already running an instance of the Searsia server on the same url. Kill the server, or run the server on a different url or port number with the --url option. Server failed: Failed to start Grizzly HTTP server: Permission denied The provided url is invalid, or the url does not belong to the machine that runs the server, or the port is blocked or taken by another application. Change the url with the --url option. Error: The server id 'X'..."
    },
    {
      "title": "Searsia Blog",
      "url": "http:\/\/searsia.org\/blog\/index.html",
      "description": "beautiful search, one step at a time... Affiliate marketing as ethical advertising by Djoerd Hiemstra Posted on November 8, 2017 Internet advertising is a completely messed-up, multi-trillion euro business that is controlled by a few big players, most notably Google and Facebook. Their business models are based on figuring out as much information about people as possible, and then using people’s weaknesses and vulnerabilities to persuade them to click on... [Read More] Tags: advertisements, privacy Privacy implications of federated search by Djoerd Hiemstra Posted on October 2, 2017 What does “federated” mean in federated search? Like the European Union is a federation of independent countries, so is a Searsia engine a federation of independent search engines. When Searsia receives a query, it does not perform a lot of searching itself: Searsia forwards the query to a limited number... [Read More] Tags: advertisements, privacy Dr Sheet Music, A New Search Engine in Town Posted on July 6, 2017 There’s a new search engine in town: Dr. Sheet Music is a search engine dedicated solely to sheet music. It retrieves results from more than 50 sites that provide sheet music; both sites that provide copyright-free sheets as sites from which you can buy sheet music of the latest popular... [Read More] Tags: advertisements Some thoughts on search advertising by Djoerd Hiemstra Posted on May 26, 2017 In many respects, advertisements drive the web. The biggest web companies today — yes, Google and Facebook — get most of their revenue from advertisements, but also many small web sites can exist because of advertising. So, as we work at Searsia to provide developers with open source tools to... [Read More] Tags: advertisements A search engine in your browser by Djoerd Hiemstra Posted on April 21, 2017 Information Retrieval has come a long way since Cyril Cleverdon conducted his famous Cranfield experiments on 1400 paper abstracts in the 1960’s. At the time, searching the massive 1.6 megabyte Cranfield collection was a big deal. Today, we routinely take pictures that are much bigger, and even a crappy smart... [Read More] Tags: privacy Older Posts &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Searsia Blog",
      "url": "http:\/\/searsia.org\/blog\/page2.html",
      "description": "beautiful search, one step at a time... A university's autocompletion ABC Posted on March 24, 2017 Last week we launched our software for query autocompletions: Type in the first character of your query, and Searsia will recommend a query that best completes your prefix. The autocompletions are targeted to the users of the search engine, without the need to track those users. Searsia’s autocompletions are demonstrated... [Read More] Tags: autocompletions Query suggestions without tracking users by Djoerd Hiemstra Posted on March 18, 2017 Today, we launch searsiasuggest, a simple but effective open source solution for query suggestions. It implements 3 kinds of query suggestions: 1) autocompletions, 2) spelling correction, and 3) related queries. The software works pretty much like many similar solutions: It inputs a list of queries with their popularity, it indexes... [Read More] Tags: autocompletions Query autocompletions considered harmful by Djoerd Hiemstra Posted on February 9, 2017 Search engines suggest completions of partially typed queries to help users speed up their searches, for instance by showing the suggested completions in a drop down box. These query autocompletions enable the user to search faster, searching for long queries with relatively few key strokes. Jakobsson (1986) showed that for... [Read More] Tags: autocompletions Searsia Cartoon by Anne Stalinski Posted on January 26, 2017 The Dutch chapter of ISOC asked the great Anne Stalinksi to make a cartoon of Searsia. Translated to English, the cartoon says: “Searsia allows users to search sources that Google cannot use”. The user enters the query “How to bake a quiche?”, and Searsia not only searches the “Internet”, but... [Read More] Tags: isoc Three worries about web search engines by Djoerd Hiemstra Posted on January 13, 2017 This post contains the text of the lightning talk presented at the New Year Event of the Dutch Internet Society (ISOC) on 12 January 2017. Of course, the slides for the Internet Society meeting were appropriately made in HTML. [Read More] Tags: isoc &larr; Newer Posts Older Posts &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Searsia Blog",
      "url": "http:\/\/searsia.org\/blog\/page3.html",
      "description": "beautiful search, one step at a time... Searsia nominated for the ISOC NL Innovation Award Posted on January 2, 2017 We begin the new year with some excellent news. The Dutch chapter of the Internet Society (ISOC) nominated Searsia for its 2017 Innovation Award. ISOC Netherlands awards the innovation award to individuals, organisations or initiatives that stimulate the growth of, and knowledge about, the Internet. The award ceremony takes place... [Read More] Tags: isoc Vietsch Foundation funds Searsia Posted on November 6, 2016 We are happy and proud to announce that the Vietsch Foundation will support the further development of Searsia. The Vietsch Foundation was founded by Willem Karel Vietsch (1952-2014) through his last will and testament: [Read More] Tags: sponsors First post! Posted on November 5, 2016 This is the first Searsia blog post, how exciting! We will use this blog to keep you posted on Searsia. Tags: random &larr; Newer Posts Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "First post!",
      "url": "http:\/\/searsia.org\/blog\/2016-11-05-first-post\/index.html",
      "description": "Posted on November 5, 2016 This is the first Searsia blog post, how exciting! We will use this blog to keep you posted on Searsia. Tags: random Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Vietsch Foundation funds Searsia",
      "url": "http:\/\/searsia.org\/blog\/2016-11-06-vietsch-foundation\/index.html",
      "description": "Posted on November 6, 2016 We are happy and proud to announce that the Vietsch Foundation will support the further development of Searsia. The Vietsch Foundation was founded by Willem Karel Vietsch (1952-2014) through his last will and testament: Karel was very involved in the Internet community. He spent a large part of his life working in the area of research and education networking, which he help developing with his energy, creativity and thorough methodical approach. Sadly, his early death, put a stop to Karel’s mission to support people and new developments, therefore he created the Vietsch Foundation, with the official objective of promoting “research into and development of advanced technology for scientific research and higher education”, in the widest sense. Searsia is funded from the “Research and Higher Education Technology Fund”, a new thematic fund that is managed by the NLnet Foundation . The Vietsch Foundation will fund the Searsia work packages: Recommendations and Advertisements . Searsia manages large collections of independent sources. Many advanced features of search engines might be seen as sources too, such as query autocompletion, related queries, and spelling correction, that is, these features are provided by modules that receive the query, and return a recommendation. Query autocompletion provides users with suggested queries in a drop down box as they type their query. Related queries are given on the search page to direct users to alternative formulations of their query, or to otherwise related information. Spelling correction suggests corrected queries if the user types an incorrectly spelled query, or an otherwise unusual query. Corrections are either used directly or presented to the user as alternatives (“Did you mean: …”). There are two main approaches to recommendations, often used in for instance movie recommender systems: 1) collaborative filtering provides recommendations based on actions from similar users (as in Amazon: “Customers who bought this item also bought…”); and 2) content-based filtering provides recommendations based on the similarity between items. Autocompletions and related queries in search engines are almost always based on queries from other users, i.e., they are essentially collaborative filtering approaches. Besides the fact that it might be undesirable to log the actions of the users, there are also other drawbacks: First, there is a cold-start problem: How to implement recommendations for a new system (when there are no user actions yet), or for a system that does not have a lot of users? Second, user queries might be stupid, racist, or otherwise objectionable: How to prevent recommending those? (it is not hard to find examples on-line of search engine autocomplete fails, as well as law suits about objectionable recommendations). We will implement and demonstrate open source solutions for recommended queries that use content-based filtering, for instance based on a web crawl, or directly based on the Searsia sample index (The Searsia server indexes search results for each resource to learn what information each resource provides). Our recommendations work without user tracking. Advertisements are the main source of income for many web sites and search engines. To make Searsia an interesting solution for developers of web search applications, we want to provide them the means to easily and transparantly add advertisements as an independent source to Searsia. The advertisements must be recognisable as advertisements, they should not track the users of the search service, and it should be easy to switch them off. Advertisements in search engines are much more effective than advertisements on ordinary web sites, because users tell the search engine exactly what they are currently looking for: The user’s query is the ideal signal for an advertisement network. We believe user tracking is not desirable and not needed for good advertisements in..."
    },
    {
      "title": "Searsia nominated for the ISOC NL Innovation Award",
      "url": "http:\/\/searsia.org\/blog\/2017-01-02-isoc-innovation-award\/index.html",
      "description": "Posted on January 2, 2017 We begin the new year with some excellent news. The Dutch chapter of the Internet Society ( ISOC ) nominated Searsia for its 2017 Innovation Award . ISOC Netherlands awards the innovation award to individuals, organisations or initiatives that stimulate the growth of, and knowledge about, the Internet. The award ceremony takes place in Amsterdam on 12 January at the Internet New Year Reception . ISOC Netherlands announced 10 nominees. Tags: isoc &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Three worries about web search engines",
      "url": "http:\/\/searsia.org\/blog\/2017-01-13-isoc-three-worries\/index.html",
      "description": "by Djoerd Hiemstra Posted on January 13, 2017 This post contains the text of the lightning talk presented at the New Year Event of the Dutch Internet Society (ISOC) on 12 January 2017. Of course, the slides for the Internet Society meeting were appropriately made in HTML. Web search is the single most important application of the web. Without search, the web would be virtually useless. I love Google (and Yahoo, and Bing), but there are some things that worry me about search engines. Let’s discuss three of those worries: Search engines influence people. In 2014, Robert Epstein and Ronald Robertson of the American Institute for Behavioral Research and Technology in the US conducted the following experiment: They asked people what candidate they would support in the Australian election, Tony Abbott or Julia Gillard? Then they let them search information about the candidates. However, the researchers did not tell the people that they manipulated the search results. People used a search engine for which higher-ranked search results linked to Web pages that describe one candidate as the better than the other. Their paper shows the results of two search engines: one that is biased to Gillard and one that is biased to Abbot. In all cases, people changed their minds towards the biased search engine’s results much and much more often than you would expect if people change their minds at random. The study shows that people have a great trust in search engines. If results are willingly manipulated, search engines could easily swing an election. The researchers call this the Search Engine Manipulation Effect . The second thing that worries me: Search engines receive information from us that is really, really private. We search things about our health, about our sexual preferences, about our financial situation. Most search engines log our queries, and they hold on to that information, indefinitely. They also log our clicks. And they use this information to target us with advertisements. Sadly, the most vulnerable people in our society, people with bad health or with bad credit scores, are in practice targeted the most. It is worth reading Cathy O’Neil’s analogy between optimizing advertisement returns and the “itinerant quack” in an old western ( O’Neil 2016 ): Vulnerability is worth gold. It always has been. Picture an itinerant quack in an old western movie. He pulls into town with his wagon full of jangling jars and bottles. When he sits down with an elderly prospective customer, he seeks out her weaknesses. She covers her mouth when she smiles, indicating that she’s sensitive about her bad teeth. She anxiously twirls her old wedding ring, which from the looks of her swollen knuckle will be stuck there till the end of her days. Arthritis. So when he pitches his products to her, he focuses on the ugliness of her teeth and her aching hands. He can promise to restore the beauty of her smile and wash away the pain from her joints. With this knowledge, he knows he’s halfway to a sale before even clearing his throat to speak. The third thing that worries me: Search engines need a lot of resources. They constantly crawl the web, downloading pages to check if things changed. My personal blog at the university is downloaded more by web robots that crawl the site, than by people that read my blog posts… You might think: Write better blog posts, Djoerd, and you are right. But, even so, constantly downloading my blog to detect changes is crazy. My blog has its own search field, which instantly shows updates when something changes. If only, somehow, we can redirect queries from search engines, that show an interest in the things I blog about, directly to my blog’s search field? Searsia’s approach to search can ease some of these worries. Searsia is a federated search engine. A Searsia search engine is a federation of search engines, like the European Union (EU) is a federation of countries. Within the EU, each countries has..."
    },
    {
      "title": "Searsia Cartoon by Anne Stalinski",
      "url": "http:\/\/searsia.org\/blog\/2017-01-26-stalinski-cartoon\/index.html",
      "description": "Posted on January 26, 2017 The Dutch chapter of ISOC asked the great Anne Stalinksi to make a cartoon of Searsia. Translated to English, the cartoon says: “Searsia allows users to search sources that Google cannot use”. The user enters the query “How to bake a quiche?”, and Searsia not only searches the “Internet”, but also the infamous “grandma’s cookbook” and “sundry”. Anne Stalinski is de nom de plume of illustrator, cartoonist and drafter Anne Staal. Her motto: “Don’t whine, color!” (Dutch: “Niet zeuren maar kleuren!”). Anne worked amongst others for City of Talent, IDFA, Studio de Leijer, and the Frankfurter Buchmesse. More information at: https:\/\/annestalinski.myportfolio.com Tags: isoc &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Query autocompletions considered harmful",
      "url": "http:\/\/searsia.org\/blog\/2017-02-09-autocomplete\/index.html",
      "description": "by Djoerd Hiemstra Posted on February 9, 2017 Search engines suggest completions of partially typed queries to help users speed up their searches, for instance by showing the suggested completions in a drop down box. These query autocompletions enable the user to search faster, searching for long queries with relatively few key strokes. Jakobsson (1986) showed that for a library information system, users are able to identify items using as little as 4.3 characters on average. Query autocompletions are now widely used, either with a drop down box or as instant results (Bast and Weber 2006) . While Jakobsson (1986) used the titles of documents as completions of user queries, web search engines today generally use large logs of queries submitted previously by their users. Using previous queries seems a common-sense choice: The best way to predict a query? Use previous queries! Several scientific studies use the AOL query log provided by Pass et al. (2006) to show that query autocompletion algorithms using query logs are effective (Bar-Yossef and Kraus 2011 ; Shokouhi and Radinsky 2012 ; Whiting and Jose 2014 ; Mitra and Craswell 2015 ; Cai et al. 2016) . However, query autocompletion algorithms that are based on query logs are problematic in two important ways: 1) They return offensive and damaging results; 2) They suffer from a destructive feedback loop. Let’s discuss these two problems in the following sections. Query autocompletion based on actual user queries may return offensive results. In 2010, a French appeals court ordered Google to remove the word arnaque, which translates roughly as “scam”, from appearing in Google’s autocompletions for CNFDI, the Centre National Privé de Formation a Distance (McGee 2010) . Google’s defense argued that its tool is based on an algorithm applied to actual search queries: It was users that searched for “cnfdi arnaque” that caused the algorithm to select offensive suggestions. The court however ruled that Google is responsible for the suggestions that it generates. Google lost a similar lawsuit in Italy, where queries for an unnamed plaintiff’s name were presented with autocomplete suggestions including truffatore (“con man”) and truffa (“fraud”) (Meyer 2011) . In another similar law suite, German’s former first lady Bettina Wulff” sued Google for defamation when queries for her name completed with terms like “escort” and “prostitute” (Lardinois 2012) . In yet another lawsuit in Japan, Google was ordered to disable autocomplete results for an unidentified man who could not find a job because a search for his name linked him with crimes he was not involved with (BBC 2012) . Google has since updated its autocompletion results by filtering offensive completions for person names, no matter who the person is (Yehoshua 2016) . But controversies over query autocompletions remain. A study by Baker and Potts (2013) highlights that autocompletions produce suggested terms which can be viewed as racist, sexist or homophobic. Baker and Pots analyzed the results of over 2,500 query prefixes and concluded that completion algorithms inadvertently help to perpetuate negative stereotypes of certain identity groups. There is increasing evidence that autocompletions play an important role in spreading fake news and propaganda. Query suggestions actively direct users to fake content on the web, even when they are not looking for it (Roberts 2016) . Examples include bizarre completions for – again – person names, like “Michelle Obama is a man”, but also completions like “Did the holocaust happen”, which if selected, returns as its top result a link to the neo-Nazi site stormfront.org (Cadwalladr 2016) . The examples show that query autocompletions can be harmful when they are based on searches by previous users. Harmful completions are suggested when ordinary users seek to expose or confirm rumors and conspiracy theories. Furthermore, there are indications that..."
    },
    {
      "title": "Query suggestions without tracking users",
      "url": "http:\/\/searsia.org\/blog\/2017-03-18-query-suggestions-without-tracking-users\/index.html",
      "description": "by Djoerd Hiemstra Posted on March 18, 2017 Today, we launch searsiasuggest , a simple but effective open source solution for query suggestions. It implements 3 kinds of query suggestions: 1) autocompletions, 2) spelling correction, and 3) related queries. The software works pretty much like many similar solutions: It inputs a list of queries with their popularity, it indexes those queries, and it ranks the queries given the user input. The query suggestions are demonstrated on UT Search , an enterprise search engine for the University of Twente. Let’s have a look at the three kinds of query suggestions implemented by searsiasuggest : Query autocompletions return popular queries by treating the user input as a prefix. For instance, when the user inputs “computer s”, the system returns popular completions of that prefix, such as “computer science”, “computer systems” and “computer supported cooperative work”. Spelling correction will suggest alternative spellings for user queries. If for instance the user ignores the suggestions from autocompletions and enters “computer sience” instead (without the “c” in “science”) then the spelling correction kicks in, returning “computer science” as its suggested query. UT search displays the following: Suppose the user now selects the corrected query “computer science”, then the search engine might show related queries, such as “Electrical Engineering Mathematics and Computer Science” and “science and technology” as follows. No rocket science either, you have probably seen this before in web search. UT search shows: To use searsiasuggest , you need a list of popular query suggestions. How to obtain those suggestions? In practice, search engines often use queries from previous users, i.e. query logs, to return query suggestions. Query logs are very effective in predicting query autocompletions and related queries. If you have a query log for your search engine, then you can effectively use them in searsiasuggest . However, there are many downsides to using query logs. We talked about some of these in last month’s blog post Query autocompletions considered harmful : Query suggestions that use query logs may return offensive and damaging results, and they suffer from a destructive feedback loop, where bad suggestions are mutually reinforced by the search engine and its users. Other downsides might be of a more principled nature: Maybe your organization’s privacy policies do not allow you to log user input and user interactions; or maybe We don’t track you is your organization’s motto and main strategy to distinguish your product from its competitors. Inspired by research of Sumit Bhatia, Debapriyo Majumdar, and Prasenjit Mitra , Reiner Kraft and Jason Zien , and Van Dang and Bruce Croft , we decided to obtain our query suggestions from the anchor text of web pages, i.e., the text that you click on in hyperlinks. We collected more than 1 million web pages for the domain utwente.nl and extracted about 200,000 unique query suggestions from the anchor text of those web pages. UT Search receives currently about 1000 queries per day on average (including repeats), so collecting that many unique queries from user logs will likely take several years. We described the procedure in: Collecting Data for Query Suggestions: a poor person’s approach . Are query suggestions from anchor text any good compared to query suggestions from query logs? To check this, we used the query log of Greg Pass, Abdur Chowdhury, and Cayley Torgeson , which contains 20 million queries submitted by about 650,000 users to the AOL search engine between March and May in 2006. Following the recent query autocompletion experiments by Fei Cai, Shangsong Liang, and Maarten de Rijke , we used queries submitted before 8 May 2006 as train queries and queries submitted afterwards as test queries. We removed queries containing URL substrings ( http: , https: , www. , .com , .net ,..."
    },
    {
      "title": "A university's autocompletion ABC",
      "url": "http:\/\/searsia.org\/blog\/2017-03-24-university-abc\/index.html",
      "description": "Posted on March 24, 2017 Last week we launched our software for query autocompletions : Type in the first character of your query, and Searsia will recommend a query that best completes your prefix. The autocompletions are targeted to the users of the search engine, without the need to track those users. Searsia’s autocompletions are demonstrated by UT Search , the search engine for the University of Twente. Today, using the autocompletions for each letter, we present a university’s autcompletion ABC: (Photo from: Flickr ) A is from alumni , the former students that are not forgotten B is from blackboard , the learning management system you’ve gotten C is from contact , please do that again sometime D is from disclaimers , legalize that doesn’t rhyme E is from education , the university’s bussiness core F is from france , where students live you’d like to see more G is from germany , the neighbours in the east H is from home , the main page of the site that’s just released I is from intranet , the pages you’re not supposed to see J is from jobs , if it’s a professor you plan to be K is from Kennispark Twente , that’s now called Novel-T L is from login , to access your password is the key M is from Major-minor , to guide the courses you will choose N is from nederlands , with strange sounds that will confuse O is from organisation , some of which is needed they say P is from publications , that are written everyday Q is from Qatar , a country that now thrives R is from research , that someday will change our lives S is from search , that Searsia does for you T is from This year , it will be a good year too! U is from Universiteitsfonds , to donate for a good cause V is from vacancies , to apply for rector, chair or boss W is from webmaster , Anne is her name X is from Xerox , printing too much really is a shame Y is from your watchlist , you’ll be notified soon Z is from zoeken , search for a Dutch course this afternoon Tags: autocompletions &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "A search engine in your browser",
      "url": "http:\/\/searsia.org\/blog\/2017-04-21-search-engine-in-your-browser\/index.html",
      "description": "by Djoerd Hiemstra Posted on April 21, 2017 Information Retrieval has come a long way since Cyril Cleverdon conducted his famous Cranfield experiments on 1400 paper abstracts in the 1960’s. At the time, searching the massive 1.6 megabyte Cranfield collection was a big deal. Today, we routinely take pictures that are much bigger, and even a crappy smart phone can search the data in milliseconds in the web browser. Seriously! Here’s a screen shot of the Oukitel OriginalOne (a smart phone that has 512 MB RAM and costs about € 50) searching the Cranfield collection in its Android 4.4.2 default browser. It’s the phone that does the actual searching: Searching Cranfield on your phone Search engines use inverted files to quickly search in lots of documents. An inverted file operates much like the index in the back of a book that lists for each important term the pages that describe the term. Similarly, an inverted file lists for every word the web pages that contain the word. This allows a search engine to quickly select the pages for your query. A full-fledged inverted file search engine for the browser is provided by Sphinx , the Python Documentation Generator. While generating the documentation, Sphinx also generates a JavaScript file called searchindex.js which contains the inverted file. Before searching the documentation, the file is downloaded to the browser to provide search results in only milliseconds. A similar approach is taken by Lunr.js . Lunr is completely written in JavaScript. It provides indexing functionality, a powerful query language, and it runs both in the browser as server-side with node.js. Lunr’s standard mode of operation builds the entire index in the browser, but it also offers a way for downloading pre-built indexes similar to Sphinx. Another remarkable example of an inverted file search engine for the browser is JScene , a proof-of-concept search engine developed by Jimmy Lin. Lin (2015) pushed JScene to its limits by searching 1.1 million tweets in milliseconds on a Mac-book Pro (containing an i7 processor and 16 GB of RAM). Although awesome from a technical perspective, searching that many documents is not yet practical. JScene took more than 10 hours to create a massive 1.8 gigabyte index from 140 megabytes of tweets. The pre-built index would need to be downloaded to the browser before the querying can start (and most certainly would crash our crappy smart phone). So, while searching millions of pages might not be practical yet in the web browser, searching less than a few thousand pages certainly is. This is useful for the many smaller web sites that are out there: personal blogs, sites with software documentation, sites of small and medium-sized enterprises, and yes, the great Cranfield collection. Searsia is all about delegating search to other search engines. So why would Searsia support in-browser search? The reason is that in practice, the search quality of some engines in a federated search engine might not be that good. In such cases, Searsia provides the possibility to add the “rerank” attribute to a search engine definition, indicating that Searsia should rerank the results returned by the search engine. This works particularly well if the low-quality search engine provides a large result set, for instance the top 500 most recent news events. Reranking might be done server-side (by searsiaserver ) or in the browser (by searsiaclient ). In both cases, building an inverted index is useless, because the low quality search engine might provide different low quality results for each query. Instead, Searsia simply scans over each result to output a reranked top X of high quality search results to the user. Constructing the inverted file would be much more costly: In addition to scanning each document it has to do a complete sort of all term-document pairs. As an interesting side-effect of Searsia’s in-browser linear search approach, users can create a static Searsia search..."
    },
    {
      "title": "Some thoughts on search advertising",
      "url": "http:\/\/searsia.org\/blog\/2017-05-26-some-thoughts-on-search-advertising\/index.html",
      "description": "by Djoerd Hiemstra Posted on May 26, 2017 In many respects, advertisements drive the web. The biggest web companies today — yes, Google and Facebook — get most of their revenue from advertisements, but also many small web sites can exist because of advertising. So, as we work at Searsia to provide developers with open source tools to build beautiful search engines, we also want to provide them with easy ways to include advertisements alongside the search results. For, why would people make beautiful search engines if it only costs them? If you plan to put advertisements along-side your search results, then the terminology used in online advertising can be confusing. The Wikipedia page on on-line advertising distinguishes advertisers that buy advertisement space and publishers that sell advertisement space. Obviously, if you are building a search engine that displays ads, then you are a publisher — even though a search engine merely directs users to the real publishers. As a publisher\/seller you will interact with advertisers\/buyers through an advertising network , a company that connects advertisers to publishers. Online advertising is highly automated on platforms that facilitate the buying and selling of advertisement space. Such platforms, often called ad exchanges , serve multiple ad networks. Platforms are increasingly specializing towards either buying ad space or selling ad space, in which case they are called demand-side platforms or supply-side platforms . Platforms determine the prices of the advertisement space through bidding : Advertisers bid on advertisement space by deciding what they are willing to pay for each impression of their ad or for each click on their ad. This bidding process within an ad exchange can be very dynamic. In real-time bidding , advertising space is bought and sold on a per-impression basis. Real-time bidding sounds fascinating, but it is really a search: The platform searches the best advertisement based on various pieces of data, such as the user’s demographic information, browsing history, and location. The more accurate the behavioral targeting of users, the more the advertisement network earns. That’s why networks track users online. They profile users by “following” them around to gather as much data on users as possible. This way, when a user reads an article on a publisher’s web site, say a real publisher like a newspaper, the advertisement network can guess what advertisement the user is willing to click, and ultimately what product a user is willing to buy. Real-time bidding for search engines is much easier than real-time bidding for a newspaper site: Users of search engines tell the search engine explicitly what they are willing to click on. What would be a good ad for the query “car”? Right, an ad for the Tesla Model 3, for instance! There is absolutely no real need to track users for search ads. DuckDuckGo describes this aptly on the DuckDuckGo company pages : It is a myth that search engines need to track you to make money on Web search. When you type in a search, we can show an ad just based on that search term. For example, if you type in, “car” we show a car ad. That doesn’t involve tracking because it is based on the keyword and not the person. Interestingly, there is an open standard for real time bidding called OpenRTB . OpenRTB was launched in late 2010 by six companies in online advertising, representing both demand-side and supply-side platforms. The standard is actively maintained by the Interactive Advertising Bureau ( IAB ), and its latest version, OpenRTB version 2.5 , was released in December 2016. Many advertisement platforms support OpenRTB, usually version 2.3, which is currently the most widely adopted release. Examples are SSPHWY , DataXu , OpenX , BrightRoll (by Yahoo), DoubleClick (by Google), and RythmOne that claimed last week that it provides the first IAB certified implementation of OpenRTB. One of the biggest changes in..."
    },
    {
      "title": "Dr Sheet Music, A New Search Engine in Town",
      "url": "http:\/\/searsia.org\/blog\/2017-07-06-a-new-search-engine\/index.html",
      "description": "Posted on July 6, 2017 There’s a new search engine in town: Dr. Sheet Music is a search engine dedicated solely to sheet music. It retrieves results from more than 50 sites that provide sheet music; both sites that provide copyright-free sheets as sites from which you can buy sheet music of the latest popular songs. Give it a try at: https:\/\/drsheetmusic.com . Dr. Sheet Music does not build a huge index of all sheet music before-hand, as other search engines do. In fact, it never downloads a web page at all. Instead, when you search, it sends your query directly to the most promising sites. This way, you always get the latest results. Dr. Sheet Music will occasionally show advertisements for charities from CharityChoice and GoedeDoelen , see for instance the result for the query for Wagner’s Prelude to Act 3 of Lohengrin . In the near future, Dr. Sheet Music will show advertisements from on-line advertisers that provide native ads too, see also our thoughts on search advertising . Tags: advertisements &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Privacy implications of federated search",
      "url": "http:\/\/searsia.org\/blog\/2017-10-02-privacy-implications-of-federated-search\/index.html",
      "description": "by Djoerd Hiemstra Posted on October 2, 2017 What does “federated” mean in federated search? Like the European Union is a federation of independent countries, so is a Searsia engine a federation of independent search engines. When Searsia receives a query, it does not perform a lot of searching itself: Searsia forwards the query to a limited number of search engines in the federation that will do the actual searching. This has some interesting implications for the user’s privacy. An important implication is the following: Searsia does not forward any identifying information to the engines in the federation. Like many web applications, Searsia consists of a web client that runs in the user’s web browser and a server that runs on another system. Searsia forwards its queries via the server. The Searsia server will not forward any identifying information, such as cookies or the user agent string to engines in the federation. Also, by forwarding the query, the engines in the federation do not receive the user’s IP address . So, engines in the federation cannot track the queries of individual users, and engines will be unable to return personalized results or targeted advertisements. However, there are several ways that private information can still leak to search engines in the federation. We address three types of privacy leakage in this post: Leakage via images, via advertisements, and via clicks. Search engines in the federation might return thumbnail images in their search results. These images are not provided directly, but by means of the URL of the image. When the Searsia client retrieves the image to display it in the search results, it will send the privacy sensitive information mentioned above (cookies, user-agent string, IP number) to a third party site. The third party site can be the search engine in the federation that provided the image URL, or any other other site for that matter. Directly downloading images has another downsite: These images might only be available over an insecure connection (HTTP instead of HTTPS), thereby creating a mixed-content page, where part of the page is not secure. Although web browsers like Firefox will still display images in mixed-content pages, they also display a warning icon in the address bar. Whenever the user visits a web site, for instance by clicking on a search result, the user will obviously share some identifying information with that site. In some cases, this information might include the user’s search terms: Search leakage is the “transmission of a user’s search terms to the site in the search results that the user chooses to visit”. Leakage of the user’s search terms may occur because of the HTTP referrer header. Browsers that run the Searsia client will send this referrer header — possibly including the query — to the site that the user wants to visit. Leakage of the user’s search terms might be the biggest threat to privacy in this list, because users share intimate details with search engines. Users might search information about their health, about their sexual preferences, or about their financial situation. It is therefore important to annonymize queries properly. At Searsia we are investigating how to add advertisements to our search results without leaking information. Most on-line advertisement networks will instruct publishers that want to display advertisements to include Javascript in their page or they instruct publishers to load an external Javascript file (or both). Obviously in such cases, not only downloading the Javascript file leaks privacy information, but it additionally runs third-party code in the user’s browser to further monitor the user’s behaviour. For instance, advertising networks use web beacons to check if the advertisement is viewable or mouse Tracking to check if they are hovered or clicked. As an example of the requirements of advertisement networks, Yahoo’s Native ads for the web shows the kind of code..."
    },
    {
      "title": "Affiliate marketing as ethical advertising",
      "url": "http:\/\/searsia.org\/blog\/2017-11-08-affiliate-marketing-as-ethical-advertising\/index.html",
      "description": "by Djoerd Hiemstra Posted on November 8, 2017 Internet advertising is a completely messed-up, multi-trillion euro business that is controlled by a few big players, most notably Google and Facebook. Their business models are based on figuring out as much information about people as possible, and then using people’s weaknesses and vulnerabilities to persuade them to click on advertisements. A dystopia to make people click The worrying implications of these companies’ persuasion architectures are wonderfully described by Zeynep Tufekci’s TED talk: We are building a dystopia just to make people click on ads , in which she shows how companies like Facebook and Google manipulate people in hidden, subtle and unexpected ways. She also describes in detail how their advertising programs can be used not only to sell shoes, but also to swing elections and gain political influence. Trackers are really everywhere In case you are wondering whether Tufekci overreacts, have a look at the number of trackers that Steven Englehardt and Arvind Narayanan found in one million popular web sites . Their study finds Google Analytics on 75% of the web sites. Even more worrying is that all of the top 5 third party trackers, and even 12 of the top 20 trackers, are owned by Google. Facebook and Twitter, while not as ubiquitously present as Google, still have trackers on more than 10% of sites they crawl. So, Google is not only tracking what you search for and click on, they are also tracking other websites you visit, despite the fact that many users tell Google explicitly: Do Not Track . Google follows your online activities on millions of sites and stores your data indefinitely. That data can be subpoenaed by lawyers, even for civil cases like divorce. Google answered over 100,000 such requests last year. Google’s AdSense and other advertisement programs Using Google’s AdSense program is tempting, because it is effective: Google really does manage to make people click on advertisements. But if you run a Searsia search engine like Dr. Sheet Music , then using AdSense is not an attractive option for several reasons: Google bans search competitors by requiring original content created from scratch , which a search engine typically does not provide. Google does not allow the use of other third party advertisements , limiting your search engine to get its advertisements from Google only. (Remember that Searsia is a federated search engine that is designed to receive results from multiple sources.) Google will approve an AdSense application faster if the site uses Google Analytics , which as we saw, is the tracking software that is available on 75% of the web sites already. AdSense does not give the site control over the advertisements that are displayed: AdSense shows whatever advertisement Google deems appropriate. Also, your site has to allow third party cookies to be set, that is, cookies from a site other than your own site. At this point we may conclude that advertisement programs like Google’s AdSense are both unethical and unsuited for sites that run a Searsia search engine. So, does this prevent people that build a search engine with Searsia from monetizing their sites? We don’t think so. There is an alternative to the surveillance advertising model of Google that is often overlooked: the so-called affiliate marketing . Affiliate marketing Affiliate marketing is a type of on-line marketing where an affiliate (also called the publisher ) is paid a commission for each sale that is closed based on a link or advertisement on the affiliate’s web site. Running an affiliate program is often as easy as putting a hyperlink to a merchant’s product on your site that contains your affiliate identifier . When a visitor of your site clicks that link, the merchant (or affiliate network) will know from this identifier that the visitor originated from your site. If this user purchases the product (or any other product) on the site within a certain..."
    },
    {
      "title": "Searsia - search federated",
      "url": "http:\/\/searsia.org\/deck.js\/isoc2017.html",
      "description": "Slides; Presented at the ISOC NL New Year 2017. Web Search? 1. Influences people ... 2. Invades privacy ... 3. Is expensive ... Our approach... Federated search Demo! Conclusion Distribution of responsibilities: More objective — harder to manipulate or censor. Queries via broker: More private — Search engines cannot track individuals. No web crawling: Cheaper — easy to maintain. People. Check it out! Acknowledgments Thanks!"
    },
    {
      "title": "Cranfield Demo",
      "url": "http:\/\/searsia.org\/cran\/index.html",
      "description": "Cranfield Search Demo   Search   Enable Javascript and use a modern browser to use Search "
    },
    {
      "title": "Searsia - Engines: Adding a Searsia resource",
      "url": "http:\/\/searsia.org\/engines.html#adding-searsia",
      "description": "To add a Searsia resource (an engine that implements the Searsia protocol, returning results of mime-type application\/searsia+json ), enter a unique Identifier ( Id ), and the resource' API template . The Id should be unique in your server. The API template is the url of the resource, where the query is replaced by {q} or {q?} (where the question mark should be used if the query is optional). After clicking \"Update\", the server tests the resource. A pop-up window appears with the results of the test, and a message explaining whether the resource is added or not."
    },
    {
      "title": "Searsia - Engines: Adding an HTML resource",
      "url": "http:\/\/searsia.org\/engines.html#adding-html",
      "description": "The server can get search results by scraping the HTML that search engines return for their end users. To add an HTML resource, use text\/html in the field Mime type . As the field API Template , take the resource' URL from your browser after querying the search engine, replacing the query in the url by {q} . If the URL does not contain a query, the search engine probably uses a POST request . To find out what the POST request is, we recommend Live HTTP Headers for Firefox. Put the POST string, replacing the query by {q} in the field Post string . Searsia uses XPath 1.0 to extract the search results from the web page. XPath is a query language for selecting elements of semi-structured data. Suppose the search results are displayed as list elements on the page, then these are encode as <li> ... <\/li> on the page, and they can be extracted from the page with the XPath query \/\/li . To find the most likely XPath query, we recommend Search Result Finder for Firefox. Fill in the XPath query in the field Item XPath . To tell Searsia how to extract the components of the search result, add XPaths for the fields title , description , link , or any other field you like (the client also supports image )."
    },
    {
      "title": "Searsia - Engines: Adding an XML or JSON resource",
      "url": "http:\/\/searsia.org\/engines.html#adding-xml",
      "description": "To add an XML resource, fill in application\/xml in the field Mime type . Then proceed as above . The Firefox Search Result Finder cannot be used in this case. To add a JSON resource, fill in application\/json in the field Mime type . Searsia also uses XPath queries to interpret JSON output, by internally converting JSON to XML, where each JSON attribute name is converted to an XML element; JSON lists are converted to repeated XML elements with the JSON list's name."
    },
    {
      "title": "Searsia - Engines: Examples",
      "url": "http:\/\/searsia.org\/engines.html#examples",
      "description": "Searsia supports many API's by including API keys as secret parameters that will not be shared, as well the possibility to add custom HTTP headers . Look at the University of Twente settings for examples of Searsia's resource configurations, including several examples that use HTML scrapers, and examples for accessing the API's of Google, Twitter, Facebook, Flickr, Instagram, and more. If you believe that Searsia is unable to get search results from an existing resource that should be supported, please post your question under Searsia Server Issues . Please, note that Searsia is not meant to scrape sites that do not want to be scraped, and therefore does not contain ways to circumvent for instance session cookies. While the Searsia resource configurations provide a way to get the search results for a great variety of existing search engines, Searsia also provides a flexible way to structure the search results from these engines. The search results, i.e., the objects in the \"hits\" list, may contain any attribute that seems appropriate, for instance an attribute \"phone_number\" for a telephone directory or an attribute \"nr_of_citations\" for a search engine that searches scientific papers. The following attributed are reserved: \"title\" : The title of the search results, that can be clicked to go to the web page that was found. Usually, the title is equals to the title of the web page that was found. The title is the only attribute that is mandatory. \"url\" : The link to the web page that was found. \"description\" : A small summary describing the result. This might be a snippet from the web site containing the query, or some other summary. \"image\" : The url of a (thumbnail) image, to be displayed with the search result. The Results demo mockup below shows 7 ways to present the search results from Wikipedia's search suggestions , that is the mockup shows the same search results 7 times using different configurations. The 7 results presentations are achieved as follows: wikididyoumean , which' name is \"Did you mean:\" , returns a single search result, that contains the title as well as \"tags\":\"#suggestion\" , which tells the client to display the result as a query suggestion. wikifull ( Wikipedia Pages ) returns title, description and URL. In this configuration, the domain of \"urltemplate\" (wikipedia.net) does not match the results' domains (wikipedia.org). Therefore, the client displays the URLs for each aggregated result. The \"urltemplate\" is the url that the user will use to search on the site, whereas the \"apitemplate\" will be used by the server. wikiimage ( Wikipedia Images ) returns title and image and \"tags\":\"#image\" , which tells the client to display the results as an image result. Note how the XPath functions concat() and substring-after() are used to create a custom image URL. wikismall2 , which is called Search Wikipedia for , does not return URLs, which makes the client infer the URL from the \"title\" and the \"urltemplate\" , effectively creating a search engine that spawns a search on Wikipedia. wikifull2 ( Wikipedia Again ) returns full search results with a thumbnail image, much like the Wikipedia Pages engine above. wikismall ( Wikipedia Small ) returns search results with \"tags\":\"#small\" , telling the client to display the results on a single line. wikirelated is called Related searches: ; It returns only the titles and \"tags\":\"#small\" . The header Related searches: cannot be clicked because the resource does not configure the \"urltemplate\" for the end user. Note that each configuration uses the same \"apitemplate\" : Each of the 7 results effectively use the exact same search engine. Please do not use this example in a actual server configuration. Note that the configuration of the mockup, if used in an actual Searsia Server, would send each query 7 times(!) to Wikipedia."
    },
    {
      "title": "Searsia - Engines: An overview of all fields",
      "url": "http:\/\/searsia.org\/engines.html#fields",
      "description": "The table below contains a quick reference for all fields: Parameter Explanation"
    },
    {
      "title": "Searsia - Engines:   *Id:",
      "url": "http:\/\/searsia.org\/engines.html#field-id",
      "description": "A unique string identifying this resource. Should be unique within the server. Name: A short name for this resource, to be displayed to the user."
    },
    {
      "title": "Searsia - Engines: Icon:",
      "url": "http:\/\/searsia.org\/engines.html#field-icon",
      "description": "The url of the icon image, to be displayed to the user. Icons should have equal width and height. Icons are preferably png files, not smaller than 48x48 pixels."
    },
    {
      "title": "Searsia - Engines: User template:",
      "url": "http:\/\/searsia.org\/engines.html#field-user-template",
      "description": "A url specified following the searsia url template syntax , to be used by users. The mime type of this url must be text\/html or application\/xml+xhtml ."
    },
    {
      "title": "Searsia - Engines: *API template:",
      "url": "http:\/\/searsia.org\/engines.html#field-api-template",
      "description": "A url specified following the searsia url template syntax , to be used by the server."
    },
    {
      "title": "Searsia - Engines: Post string:",
      "url": "http:\/\/searsia.org\/engines.html#field-post-string",
      "description": "Only set if the API template HTTP method is POST, empty if the HTTP method is GET. Like the template, the post string may include parameters."
    },
    {
      "title": "Searsia - Engines: Mime type:",
      "url": "http:\/\/searsia.org\/engines.html#field-mime-type",
      "description": "The format returned by the API Template. Supported formats are: application\/searsia+json , text\/html , application\/xml , application\/json . If omitted, the mime type application\/searsia+json is assumed."
    },
    {
      "title": "Searsia - Engines:  Test query:",
      "url": "http:\/\/searsia.org\/engines.html#field-test-query",
      "description": "A query for which a search gives a non-empty result. If not set, the system should give a non-empty result for the query searsia ."
    },
    {
      "title": "Searsia - Engines:  Rerank:",
      "url": "http:\/\/searsia.org\/engines.html#field-rerank",
      "description": "Prior: A value between 0 and 1 indicating the prior probability of a resource to be selected (prior to knowing the query). For instance, a value of 0.1 indicates that the resource gives relevant results for 1 in 10 queries. A value of 1 indicates that the resource always returns relevant results. In this case, the server likely returns the resource for every query. Values bigger than 1 are permitted to prioritize between multiple resources that are always selected."
    },
    {
      "title": "Searsia - Engines:  Item XPath:",
      "url": "http:\/\/searsia.org\/engines.html#field-item-xpath",
      "description": "An XPath 1.0 query that selects the search results from an HTML or XML result. XPath is also used to select results from JSON results, assuming a standard conversion to XML, where JSON lists are converted to repeated XML elements."
    },
    {
      "title": "Searsia - Engines: XPaths:",
      "url": "http:\/\/searsia.org\/engines.html#field-xpaths",
      "description": "Field names and XPath queries for selecting parts of search results such as the title, url, and description. For example, the title would typically be selected as the first anchor text in a search result, i.e., (.\/\/a)[1] . The XPath queries are evaluated with respect to an Item XPath context node, and they typically start with . (the 'self' axis step)."
    },
    {
      "title": "Searsia - Engines:  Headers:",
      "url": "http:\/\/searsia.org\/engines.html#field-headers",
      "description": "HTTP headers to be sent to the API Template, consisting of a field name (without ':') and the field value. Like API Template and Post String, the field value may include parameters."
    },
    {
      "title": "Searsia - Engines:  Parameters:",
      "url": "http:\/\/searsia.org\/engines.html#field-parameters",
      "description": "Secret parameter names and their values. Occurrences of the parameter names in the API Template, Post String or Headers will be replaced by the value. The server will not share the parameter names and values with other clients, so it is safe to use them for API keys and secrets. * mandatory settings Next: The Searsia protocol ."
    },
    {
      "title": "Searsia - Protocol: Call with only a query",
      "url": "http:\/\/searsia.org\/protocol.html#query-only",
      "description": "A call to the server with only a query returns the server's local search results. For instance, for the query searsia , the University of Twente API: https:\/\/search.utwente.nl\/searsia\/search?q=searsia&r= produces a result that is similar to one below: { \"hits\": [ { \"title\": \"Searsia\", \"description\": \"Search for noobs\", \"score\": 3.319267, \"url\": \"http:\\/\\/searsia.org\" }, { \"rid\": \"googlecustom\", \"title\": \"Projecten | Organisatie\", \"description\": \"UT Search is powered by Searsia ...\", \"score\": 2.9963183, \"url\": \"https:\\/\\/www.utwente.nl\\/organisatie\\/nieuws-events\\/dossier\\/&#8230;\" }, { \"rid\": \"publications\", \"score\": 2.0 } ], \"resource\": { \"id\": \"utwente\", \"mimetype\": \"application\\/searsia+json\", \"urltemplate\": \"https:\\/\\/search.utwente.nl\\/search.html?q={q}\", \"favicon\": \"https:\\/\\/search.utwente.nl\\/ut-icons\\/ut.png\", \"testquery\": \"twente\", \"name\": \"University of Twente\", \"prior\": 2, \"apitemplate\": \"https:\\/\\/search.utwente.nl\\/searsia\\/search?q={q?}&r={r?}\", \"banner\": \"https:\\/\\/search.utwente.nl\\/ut-icons\\/utlogo-black.png\" }, \"searsia\": \"v0.3.0\" } The attribute \"hits\" contains search results that may have an attribute \"rid\" , which is the resource identifier of the resource that produced the result for a previous search. Searsia ranks the results such that the resource identifiers are ranked by the relevance of the resources to the query. The attribute \"resource\" contains information about the server, such as its name and icon. The attribite \"searsia\" contains the version number of the server. Based on this results, the client may now decide to ask the server to forward the query to \"googlecustom\" and \"publications\" , which is done as follows:"
    },
    {
      "title": "Searsia - Protocol: Call with a query and a resource identifier",
      "url": "http:\/\/searsia.org\/protocol.html#query-resource",
      "description": "A call to the server with a query and a resource identifier will let the server forward the query to the resource. For instance, for the query searsia , a call to the University of Twente API: https:\/\/search.utwente.nl\/searsia\/search?q=searsia&r=publications produces a result that is similar to one below: { \"hits\": [ { \"title\": \"Searsia Documentation\", \"description\": \"Djoerd Hiemstra, Dolf Trieschnigg, Thomas Demeester, ...\", \"url\": \"http:\\/\\/doc.utwente.nl\\/970499\\/\" } ], \"resource\": { \"id\": \"publications\", \"mimetype\": \"text\\/html\", \"urltemplate\": \"http:\\/\\/doc.utwente.nl\\/cgi\\/search\\/archive\\/simple?q={q}\", \"favicon\": \"http:\\/\\/doc.utwente.nl\\/style\\/images\\/fileicons\\/pdf.png\", \"itempath\": \"\\/\\/div[@id='content']\\/div\\/table\\/tbody\\/tr[.\\/td\\/span\\/a]\", \"extractors\": { \"title\": \"(.\\/\\/a)[1]\", \"description\": \".\", \"image\": \"(.\\/\\/img)[last()]\\/@src\", \"url\": \".\\/\\/@href\" }, \"testquery\": \"test\", \"name\": \"Publications\", \"prior\": 1, \"apitemplate\": \"http:\\/\\/doc.utwente.nl\\/cgi\\/search\\/archive\\/simple?q={q}\" }, \"searsia\": \"v0.3.0\" } The attribute \"hits\" contains search results of the resource \"publications\" . The attribute \"resource\" contains contact information for the Publications search engine. In some cases additional information such as API keys need to be provided. In this example, however, the contact information suffices to contact Publications directly. Instead of forwarding the query, a client may only ask for the contact details, and then forward the query itself. A request for the contact details is done by the call in the next section:"
    },
    {
      "title": "Searsia - Protocol: Call with only a resource identifier",
      "url": "http:\/\/searsia.org\/protocol.html#resource-only",
      "description": "A call to the server with only a resource identifier returns the contact information of the resource. For instance, for the resource googlecustom , a call to the University of Twente API: https:\/\/search.utwente.nl\/searsia\/search?q=&r=googlecustom produces a result that is similar to one below: { \"resource\": { \"id\": \"googlecustom\", \"name\": \"University of Twente by Google\", \"mimetype\": \"application\\/json\", \"urltemplate\": \"https:\\/\\/www.google.com\\/cse?cx=003637895283361378319:95lv8knurmc\", \"favicon\": \"http:\\/\\/www.google.com\\/s2\\/favicons?domain=google.com\", \"itempath\": \"\\/\\/results\", \"extractors\": { \"title\": \".\\/titleNoFormatting\", \"description\": \".\\/contentNoFormatting\", \"image\": \".\\/richSnippet\\/cseThumbnail\\/src\", \"url\": \".\\/unescapedUrl\" }, \"testquery\": \"twente\", \"prior\": 2, \"apitemplate\": \"https:\\/\\/www.googleapis.com\\/customsearch\\/v1element?key={apikey}&#8230; }, \"searsia\": \"v0.3.0\" } The attribute \"resource\" contains contact information for Google's Custom search engine. To use this resource directly, you will have to obtain a API key from Google, and add it as a secret parameter . Next: People ."
    },
    {
      "title": "Searsia - Start: The client",
      "url": "http:\/\/searsia.org\/start.html#client",
      "description": "The Searsia Web client can be downloaded as searsiaclient.zip and unzipped on your local machine or web server. To use the web client, open the file index.html in a web browser. Congratulations! You now run your own web application for federated search."
    },
    {
      "title": "Searsia - Start: Client options",
      "url": "http:\/\/searsia.org\/start.html#clientoptions",
      "description": "The client will automatically connect to the University of Twente search server. To connect to another server, edit the second line in the file js\/searsia.js , which contains the API template of the server. var API_TEMPLATE = 'https:\/\/search.utwente.nl\/searsia\/search?q={q?}&r={r?}' If you run a server on your local machine (see next section), you can connect to your own server by setting the API template to: 'http:\/\/localhost:16842\/searsia\/search?q={q?}&r={r?}'"
    },
    {
      "title": "Searsia - Start: The server",
      "url": "http:\/\/searsia.org\/start.html#server",
      "description": "Download the Java server searsiaserver.jar and use the following command to start the server: java -jar searsiaserver.jar The server requires Java 7 or higher. Just like the web client, the java server will automatically connect to the University of Twente search server. The server displays the following message: Searsia Server v0.4.0 Connected to: utwente API Template: http:\/\/localhost:16842\/searsia\/search?q={q?}&r={r?} Use Ctrl+c to stop. Use the reported API Template in your client as explained above to connect."
    },
    {
      "title": "Searsia - Start: Server options",
      "url": "http:\/\/searsia.org\/start.html#serveroptions",
      "description": "The java server supports several command line options, shown in the following table. For convenience, each option has a short-hand consisting of one hyphen and the first letter of the option, for instance -h for --help . Option Explanation"
    },
    {
      "title": "Searsia - Start:  --help",
      "url": "http:\/\/searsia.org\/start.html#option-help",
      "description": "Show help."
    },
    {
      "title": "Searsia - Start: --interval <arg>",
      "url": "http:\/\/searsia.org\/start.html#interval",
      "description": "Takes as argument an integer, which is the poll interval (in seconds). The server sends a random query each interval to a search engine. The default value is 120 seconds. If your server contains 30 resources (search engines), a polling interval of 120 seconds will poll each resource on average once per 120 * 30 = 3600 seconds, so once each 60 minutes, about 24 queries a day. In scientific literature on distributed information retrieval, polling is usually called query-based sampling. An interval of 0 disables polling."
    },
    {
      "title": "Searsia - Start: --log <arg>",
      "url": "http:\/\/searsia.org\/start.html#option-log",
      "description": "type of log messages produced by the server (to the index directory ). Supported levels are: 0 = no logging; 1 = only errors; 2 = errors and warnings; 3 = errors, warnings, and information, 4 = all of level 3 plus debug information. The default level is 2 ."
    },
    {
      "title": "Searsia - Start: --mother <arg>",
      "url": "http:\/\/searsia.org\/start.html#option-mother",
      "description": "Sets the API template of the mother. Use none to run the in stand-alone mode. The default is currently ' https:\/\/search.utwente.nl\/searsia\/search?q={q?}&r={r?} '."
    },
    {
      "title": "Searsia - Start: --name <arg>",
      "url": "http:\/\/searsia.org\/start.html#option-name",
      "description": "Set the id (name) of this end point. The server generates a random string as its name if this setting is not provided."
    },
    {
      "title": "Searsia - Start: --open ",
      "url": "http:\/\/searsia.org\/start.html#option-open",
      "description": "Enable on-line updates. This enables on-line updates for your server by anyone, use this only for testing purposes."
    },
    {
      "title": "Searsia - Start: --path <arg>",
      "url": "http:\/\/searsia.org\/start.html#option-path",
      "description": "Set the path on the file system where the index is stored. The default depends on your operating system. Typically, the index ends up in your home directory under: .local\/share\/searsia if your are on a Linux-based system, under Library\/Application Support\/Searsia if you are on Apple, and under Application Data\/Searsia on many Windows versions."
    },
    {
      "title": "Searsia - Start: --url <arg>",
      "url": "http:\/\/searsia.org\/start.html#option-url",
      "description": "Set the url of the web service endpoint. The default is ' http:\/\/localhost:16842\/searsia\/ '"
    },
    {
      "title": "Searsia - Start: Server trouble shooting",
      "url": "http:\/\/searsia.org\/start.html#troubleshooting",
      "description": "The server might return the following error messages:"
    },
    {
      "title": "Searsia - Start: Setup failed: Cannot create directory: ",
      "url": "http:\/\/searsia.org\/start.html#error-create-directory",
      "description": "The server cannot create the index. Check if the server has write premissions in the reported directory. Use the --path option to change the location of the index."
    },
    {
      "title": "Searsia - Start: Setup failed: Lock obtain timed out: NativeFSLock",
      "url": "http:\/\/searsia.org\/start.html#error-timed-out",
      "description": "There is already an instance of the Searsia server running on the same index. Kill the server, or run the server with a different name with the --name option."
    },
    {
      "title": "Searsia - Start: Server failed: Failed to start Grizzly HTTP server: Address already in use",
      "url": "http:\/\/searsia.org\/start.html#error-start-server",
      "description": "There is already running an instance of the Searsia server on the same url. Kill the server, or run the server on a different url or port number with the --url option."
    },
    {
      "title": "Searsia - Start: Server failed: Failed to start Grizzly HTTP server: Unresolved address",
      "url": "http:\/\/searsia.org\/start.html#error-server-address",
      "description": "Server failed: Failed to start Grizzly HTTP server: Permission denied The provided url is invalid, or the url does not belong to the machine that runs the server, or the port is blocked or taken by another application. Change the url with the --url option."
    },
    {
      "title": "Searsia - Start: Error: Local id conflict",
      "url": "http:\/\/searsia.org\/start.html#error-resource-id",
      "description": "Error: The server id 'X' already exists. This usually happens if you give your engine a name with the --name option that is already used by the mother. Give your server another name."
    },
    {
      "title": "Searsia - Start: Error: Connection failed: java.net.UnknownHostException",
      "url": "http:\/\/searsia.org\/start.html#error-unknownhost-exception",
      "description": "Error: Connection failed: java.io.FileNotFoundException , or Error: Mother id conflict Connection to the mother failed. Check your internet connection. Check the mother engine and mother template. Change the mother template with the --mother option."
    },
    {
      "title": "Searsia - Start: Error: Connection failed: org.json.JSONException",
      "url": "http:\/\/searsia.org\/start.html#error-json-exception",
      "description": "The mother is not a Searsia engine. Check the mother engine and mother template. Change the mother with the --mother option. Download Searsia searsiaclient.zip (219 KB) searsiaserver.jar (11.1 MB) Thanks, Github! hosted by Github Next: Adding search engines to your server."
    },
    {
      "title": "Vietsch Foundation funds Searsia: Recommendations without tracking of users",
      "url": "http:\/\/searsia.org\/blog/2016-11-06-vietsch-foundation/index.html#recommendations-without-tracking-of-users",
      "description": "Searsia manages large collections of independent sources. Many advanced features of search engines might be seen as sources too, such as query autocompletion, related queries, and spelling correction, that is, these features are provided by modules that receive the query, and return a recommendation. Query autocompletion provides users with suggested queries in a drop down box as they type their query. Related queries are given on the search page to direct users to alternative formulations of their query, or to otherwise related information. Spelling correction suggests corrected queries if the user types an incorrectly spelled query, or an otherwise unusual query. Corrections are either used directly or presented to the user as alternatives (“Did you mean: …”). There are two main approaches to recommendations, often used in for instance movie recommender systems: 1) collaborative filtering provides recommendations based on actions from similar users (as in Amazon: “Customers who bought this item also bought…”); and 2) content-based filtering provides recommendations based on the similarity between items. Autocompletions and related queries in search engines are almost always based on queries from other users, i.e., they are essentially collaborative filtering approaches. Besides the fact that it might be undesirable to log the actions of the users, there are also other drawbacks: First, there is a cold-start problem: How to implement recommendations for a new system (when there are no user actions yet), or for a system that does not have a lot of users? Second, user queries might be stupid, racist, or otherwise objectionable: How to prevent recommending those? (it is not hard to find examples on-line of search engine autocomplete fails, as well as law suits about objectionable recommendations). We will implement and demonstrate open source solutions for recommended queries that use content-based filtering, for instance based on a web crawl, or directly based on the Searsia sample index (The Searsia server indexes search results for each resource to learn what information each resource provides). Our recommendations work without user tracking."
    },
    {
      "title": "Vietsch Foundation funds Searsia: Advertisements without tracking of users",
      "url": "http:\/\/searsia.org\/blog/2016-11-06-vietsch-foundation/index.html#advertisements-without-tracking-of-users",
      "description": "Advertisements are the main source of income for many web sites and search engines. To make Searsia an interesting solution for developers of web search applications, we want to provide them the means to easily and transparantly add advertisements as an independent source to Searsia. The advertisements must be recognisable as advertisements, they should not track the users of the search service, and it should be easy to switch them off. Advertisements in search engines are much more effective than advertisements on ordinary web sites, because users tell the search engine exactly what they are currently looking for: The user’s query is the ideal signal for an advertisement network. We believe user tracking is not desirable and not needed for good advertisements in search applications. Searsia technology should (also) work without user tracking. Searsia uses a broker (the Searsia server) that acts as an intermediary between the sources and the user. We will implement advertisement such that the user’s queries will not go directly to the advertisement network. Instead, they are forwarded by the broker. So, the advertisement network will not receive information that might identify the user, such as IP numbers, cookies, and the browser’s user agent string, which makes it virtually impossible to identify or track the user. We will find at least one, and likely more advertisement partners that share our vision, and that are willing to provide advertisements for anonymous queries from Searsia search engines."
    },
    {
      "title": "Vietsch Foundation funds Searsia: More information",
      "url": "http:\/\/searsia.org\/blog/2016-11-06-vietsch-foundation/index.html#more-information",
      "description": "For more information, check out the information at the Vietsch Foundation and NLnet. Searsia at Vietsch Foundation Searsia at NLnet Tags: sponsors &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Three worries about web search engines: 1. The Search Engine Manipulation Effect",
      "url": "http:\/\/searsia.org\/blog/2017-01-13-isoc-three-worries/index.html#1-the-search-engine-manipulation-effect",
      "description": "Search engines influence people. In 2014, Robert Epstein and Ronald Robertson of the American Institute for Behavioral Research and Technology in the US conducted the following experiment: They asked people what candidate they would support in the Australian election, Tony Abbott or Julia Gillard? Then they let them search information about the candidates. However, the researchers did not tell the people that they manipulated the search results. People used a search engine for which higher-ranked search results linked to Web pages that describe one candidate as the better than the other. Their paper shows the results of two search engines: one that is biased to Gillard and one that is biased to Abbot. In all cases, people changed their minds towards the biased search engine’s results much and much more often than you would expect if people change their minds at random. The study shows that people have a great trust in search engines. If results are willingly manipulated, search engines could easily swing an election. The researchers call this the Search Engine Manipulation Effect ."
    },
    {
      "title": "Three worries about web search engines: 2. Privacy",
      "url": "http:\/\/searsia.org\/blog/2017-01-13-isoc-three-worries/index.html#2-privacy",
      "description": "The second thing that worries me: Search engines receive information from us that is really, really private. We search things about our health, about our sexual preferences, about our financial situation. Most search engines log our queries, and they hold on to that information, indefinitely. They also log our clicks. And they use this information to target us with advertisements. Sadly, the most vulnerable people in our society, people with bad health or with bad credit scores, are in practice targeted the most. It is worth reading Cathy O’Neil’s analogy between optimizing advertisement returns and the “itinerant quack” in an old western ( O’Neil 2016 ): Vulnerability is worth gold. It always has been. Picture an itinerant quack in an old western movie. He pulls into town with his wagon full of jangling jars and bottles. When he sits down with an elderly prospective customer, he seeks out her weaknesses. She covers her mouth when she smiles, indicating that she’s sensitive about her bad teeth. She anxiously twirls her old wedding ring, which from the looks of her swollen knuckle will be stuck there till the end of her days. Arthritis. So when he pitches his products to her, he focuses on the ugliness of her teeth and her aching hands. He can promise to restore the beauty of her smile and wash away the pain from her joints. With this knowledge, he knows he’s halfway to a sale before even clearing his throat to speak."
    },
    {
      "title": "Three worries about web search engines: 3. Crawling, crawling, crawling…",
      "url": "http:\/\/searsia.org\/blog/2017-01-13-isoc-three-worries/index.html#3-crawling-crawling-crawling",
      "description": "The third thing that worries me: Search engines need a lot of resources. They constantly crawl the web, downloading pages to check if things changed. My personal blog at the university is downloaded more by web robots that crawl the site, than by people that read my blog posts… You might think: Write better blog posts, Djoerd, and you are right. But, even so, constantly downloading my blog to detect changes is crazy. My blog has its own search field, which instantly shows updates when something changes. If only, somehow, we can redirect queries from search engines, that show an interest in the things I blog about, directly to my blog’s search field?"
    },
    {
      "title": "Three worries about web search engines: Federated Search",
      "url": "http:\/\/searsia.org\/blog/2017-01-13-isoc-three-worries/index.html#federated-search",
      "description": "Searsia’s approach to search can ease some of these worries. Searsia is a federated search engine. A Searsia search engine is a federation of search engines, like the European Union (EU) is a federation of countries. Within the EU, each countries has its own government and its own laws. Within Searsia, each search engine indexes whatever it likes and returns whatever it likes. Sites like Wikipedia, Amazon, Stack Overflow and YouTube provide their own search interface. Obviously, they do not need to crawl their site, because they own the data. They instantly know when something changed. Searsia comes with a configuration mechanism that makes it easy to add search engines to the federation. When a Searsia engine receives a query, it forwards the query to a selection of the search engines in the federation. It will try to select those search engines that most likely satisfy the user’s need, for instance forwarding a query to YouTube, if it believes the user would like a video. This way, Searsia displays live results from YouTube, instead of results that were crawled a while ago. Each Searsia engine is a search engine too, pretty much like any other search engine, so we might make a federation of those search engines again."
    },
    {
      "title": "Three worries about web search engines: Conclusion",
      "url": "http:\/\/searsia.org\/blog/2017-01-13-isoc-three-worries/index.html#conclusion",
      "description": "Let’s go back to our three worries: Manipulation, Privacy, and Costs of crawling. What do you gain by installing Searsia? First, Searsia delegates queries to multiple search engines that it does not control. Even if one or two of those manipulate or censor their results, there will be other engines in the federation that show more objective results. Second, all queries go via Searsia, so engines in the federation can no longer track individual users. Of course, now Searsia will get all your queries, but no worries, anyone can run a Searsia server. Third, Searsia does not crawl the web, ever. It will learn over time from each engine in the federation what its contents are. This makes it cheap to set up a Searsia engine, and easy to maintain. You can run Searsia on a cheap server in your own network."
    },
    {
      "title": "Three worries about web search engines: Acknowledgments",
      "url": "http:\/\/searsia.org\/blog/2017-01-13-isoc-three-worries/index.html#acknowledgments",
      "description": "We are grateful to the Vietsch Foundation for supporting our work. We also thank NLNet and the University of Twente."
    },
    {
      "title": "Three worries about web search engines: Epilogue",
      "url": "http:\/\/searsia.org\/blog/2017-01-13-isoc-three-worries/index.html#epilogue",
      "description": "At the ISOC meeting, someone in the audience asked me the following: Does Searsia show the advertisements of a search engine? If not then search engines will likely object to being part of a Searsia federation. Searsia will generally be configured to access the official APIs of search engines from Google, Twitter, etc., and it will show whatever the engine’s official API returns. For our current demonstration deployment, U. Twente Search , we have not seen any of the APIs returning advertisements. However, Searsia’s configuration options are quite general; they include options for scraping web results, and for selecting (and ignoring) returned elements, including advertisements. So, yes, Searsia can be configured such that it ignores advertisements from engines. The Searsia client explicitly shows what engine in the federation produced the results. This way, Searsia transparently creates traffic for search engines and for the sites they search. Searsia announces itself by a custom User-Agent string . If sites object to being part of Searsia, they can be removed from the federation. Tags: isoc &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Query autocompletions considered harmful: Offensive queries",
      "url": "http:\/\/searsia.org\/blog/2017-02-09-autocomplete/index.html#offensive-queries",
      "description": "Query autocompletion based on actual user queries may return offensive results. In 2010, a French appeals court ordered Google to remove the word arnaque, which translates roughly as “scam”, from appearing in Google’s autocompletions for CNFDI, the Centre National Privé de Formation a Distance (McGee 2010) . Google’s defense argued that its tool is based on an algorithm applied to actual search queries: It was users that searched for “cnfdi arnaque” that caused the algorithm to select offensive suggestions. The court however ruled that Google is responsible for the suggestions that it generates. Google lost a similar lawsuit in Italy, where queries for an unnamed plaintiff’s name were presented with autocomplete suggestions including truffatore (“con man”) and truffa (“fraud”) (Meyer 2011) . In another similar law suite, German’s former first lady Bettina Wulff” sued Google for defamation when queries for her name completed with terms like “escort” and “prostitute” (Lardinois 2012) . In yet another lawsuit in Japan, Google was ordered to disable autocomplete results for an unidentified man who could not find a job because a search for his name linked him with crimes he was not involved with (BBC 2012) . Google has since updated its autocompletion results by filtering offensive completions for person names, no matter who the person is (Yehoshua 2016) . But controversies over query autocompletions remain. A study by Baker and Potts (2013) highlights that autocompletions produce suggested terms which can be viewed as racist, sexist or homophobic. Baker and Pots analyzed the results of over 2,500 query prefixes and concluded that completion algorithms inadvertently help to perpetuate negative stereotypes of certain identity groups. There is increasing evidence that autocompletions play an important role in spreading fake news and propaganda. Query suggestions actively direct users to fake content on the web, even when they are not looking for it (Roberts 2016) . Examples include bizarre completions for – again – person names, like “Michelle Obama is a man”, but also completions like “Did the holocaust happen”, which if selected, returns as its top result a link to the neo-Nazi site stormfront.org (Cadwalladr 2016) . The examples show that query autocompletions can be harmful when they are based on searches by previous users. Harmful completions are suggested when ordinary users seek to expose or confirm rumors and conspiracy theories. Furthermore, there are indications that harmful query suggestions increasingly result from computational propaganda, i.e., organizations use bots to game search engines and social networks (Shorey and Howard 2016) ."
    },
    {
      "title": "Query autocompletions considered harmful: A destructive feedback loop",
      "url": "http:\/\/searsia.org\/blog/2017-02-09-autocomplete/index.html#a-destructive-feedback-loop",
      "description": "Morally unacceptable query completions are not only introduced by the searches of previous users, they are also mutually reinforced by the search engine and its users. When a query autocompletion algorithm suggests morally unacceptable queries, users are likely to select those, even if the users are only confused or stunned by the suggestion. But how does the search engine ever learn it was wrong? It might not ever. As soon as the system determined that some queries are recommended; they are more often selected by users, which in turn makes the queries end up in the training data that the search engine uses to train it’s future query autocompletion algorithms. Such a destructive feedback loop is one of the features of a Weapon of Math Destruction, a term coined by O’Neil (2016) to describe harmful statistical models. O’Neil sums up three elements of a Weapon of Math Destruction: Damage, Opacity, and Scale. Indeed, the damage caused by query autocompletion algorithms is extensively discussed in the previous section. Query autocompletion algorithms are opaque since they are based on the proprietary, previous searches known only by the search engine. If run by a search engine that has a big market share, the query completion algorithm also scales to a large number of users. Query autocompletions of a search engine with a majority market share in a country might substantially alter the opinion of the country’s citizens, for instance, a substantial number of people will start to doubt whether the holocaust really happened."
    },
    {
      "title": "Query autocompletions considered harmful: Fixing morally unacceptable results using content-based autocompletions",
      "url": "http:\/\/searsia.org\/blog/2017-02-09-autocomplete/index.html#fixing-morally-unacceptable-results-using-content-based-autocompletions",
      "description": "It is instructive to view a query autocompletion algorithm as a recommender system, that is, the search engine recommends queries based on some input. Recommender systems are usually classified into two categories based on how recommendations are made: 1) Collaborative recommendations, and 2) Content-based recommendations (Adomavicius and Tuzhilin 2005) . Collaborative query autocompletions are based on similarities between users: “People that typed this prefix often searched for: …”. Content-based query autocompletions are based on similarities with the content: “Web pages that contain this prefix are often about: …”. Until now, we only discussed collaborative query autocompletion algorithms. What would a content-based query autocompletion algorithm look like? Bhatia et al. (2011) proposed a system that generates autocompletions by using all N-grams of order 1, 2 and 3 (that is single words, word pairs, and word triples) from the documents. They tested their content-based autocompletions on newspaper data and on data from ubuntuforums.org. Instead of N-gram models from all text, Kraft and Zien (2004) built models for query reformulation solely from the anchor text, the clickable text from hyperlinks in web pages. Interestingly, Dang and Croft (2010) argue that anchor text can be an effective substitute for query logs. They studied the use of anchor texts for a range of query reformulation techniques, including query-based stemming and query reformulation, treating the anchor text as if it were a query log. At Searsia, we develop open source tools that allow search engine developers to easily develop content-based autocompletions, so autocompletions without the need to track users. A first demo of content-based autocompletions using anchor texts now runs on: U. Twente Search . In the coming weeks, we will evaluate our content-based recommendations for U. Twente search, and we will investigate whether content-based autocompletions can replace collaborative autocompletions on web scale. The first results look promising: We believe content-based recommendations can provide high quality query autocompletions, and fix some of the harmful effects of today’s query autocompletion algorithms."
    },
    {
      "title": "Query autocompletions considered harmful: References",
      "url": "http:\/\/searsia.org\/blog/2017-02-09-autocomplete/index.html#references",
      "description": "M. Jakobsson (1986) Autocompletion in full text transaction entry: a method for humanized input . In: Proceedings of the ACM SIGCHI Conference on Human Factors in Computing Systems . H. Bast and I. Weber (2006) Type less, find more: fast autocompletion search with a succinct index . In: Proceedings of the ACM SIGIR Conference on Research and Advanced Technology for Information Retrieval . Z. Bar-Yossef and N. Kraus (2011) Context-sensitive query auto-completion . In: Proceedings of the World Wide Web Conference (WWW) , 107–116 M. Shokouhi and K. Radinsky (2012) Time-sensitive query auto-completion . In: Proceedings of the ACM SIGIR Conference on Research and Advanced Technology for Information Retrieval , pages 601–610 S. Whiting and J.M. Jose (2014) Recent and robust query auto-completion . In: Proceedings of the World Wide Web Conference (WWW) , 971–982 M. McGee (2010) Google Loses French Lawsuit Over Google Suggest . Search Engine Land 6 January 2010 . D. Meyer (2011) Google loses autocomplete defamation case in Italy . ZDNet 5 April 2011 . F. Lardinois (2012) Germany’s Former First Lady Sues Google For Defamation Over Autocomplete Suggestions , TechCrunch , 7 September 2012. BBC (2012) Google ordered to change autocomplete function in Japan . BBC News 26 March 2012 . T. Yehoshua (2016) Google Search Autocomplete . Google Blog 10 June 2016 . H. Roberts (2016) How Google’s ‘autocomplete’ search results spread fake news around the web . Business Insider 5 December 2016 . C. Cadwalladr (2016) Google is not ‘just’ a platform. It frames, shapes and distorts how we see the world . The Guardian 11 December 2016 . P. Baker and A. Potts (2013). Why do White people have thin lips? Google and the perpetuation of stereotypes via auto-complete search forms . Critical Discourse Studies 10 (2), 187–204. S. Shorey and P.N. Howard (2016) Automation, Big Data, and Politics: A Research Review . International Journal of Communication 10 (2016), 5032–5055 C. O’Neil (2016) Weapons of math destruction: how big data increases inequality and threatens democracy . Crown . F. Cai, S. Liang, and M. de Rijke (2016) Prefix-adaptive and time-sensitive personalized query auto completion . IEEE Transaction on Knowledge and Data Engineering B. Mitra and N. Craswell (2015) Query Auto-Completion for Rare Prefixes . In: Proceedings of the 24th ACM International on Conference on Information and Knowledge Management (CIKM) , 1755-1758 G. Di Santo, R. McCreadie, C. Macdonald, and I Ounis (2015) Comparing Approaches for Query Autocompletion . In: Proceedings of the 38th International ACM SIGIR Conference on Research and Development in Information Retrieval , 775-778 S. Bhatia, D. Majumdar, and P. Mitra (2011) Query suggestions in the absence of query logs . In: Proceedings of the 34th international ACM SIGIR conference on Research and development in Information Retrieval , 795-804 V. Dang, and W.B. Croft (2010) Query reformulation using anchor text . In: Proceedings of the third ACM international conference on Web search and data mining R. Kraft and J. Zien (2004) Mining anchor text for query refinement . In: Proceedings of the 13th International World Wide Web Conference , 666–674. G. Adomavicius and A. Tuzhilin (2005) Toward the next generation of recommender systems: a survey of the state-of-the-art and possible extensions , IEEE Transaction on Knowledge and Data Engineering 17 (6), 734-749 A. Zhang, A. Goyal, W. Kong, H. Deng, A. Dong, Y. Chang, C.A. Gunter, and J. Han (2015) Adaptive query auto-completion via implicit negative feedback . In: Proceedings of the 38th International ACM SIGIR Conference on Research and Development in Information Retrieval , 143–152 G. Pass, A. Chowdhury and C. Torgeson (2006) A Picture of Search . In: _Proceedings of the 1st international conference on Scalable information systems (InfoScale), 1-7 Tags: autocompletions &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by..."
    },
    {
      "title": "Query suggestions without tracking users: Query autocompletions",
      "url": "http:\/\/searsia.org\/blog/2017-03-18-query-suggestions-without-tracking-users/index.html#query-autocompletions",
      "description": "Query autocompletions return popular queries by treating the user input as a prefix. For instance, when the user inputs “computer s”, the system returns popular completions of that prefix, such as “computer science”, “computer systems” and “computer supported cooperative work”."
    },
    {
      "title": "Query suggestions without tracking users: Spell-corrected queries",
      "url": "http:\/\/searsia.org\/blog/2017-03-18-query-suggestions-without-tracking-users/index.html#spell-corrected-queries",
      "description": "Spelling correction will suggest alternative spellings for user queries. If for instance the user ignores the suggestions from autocompletions and enters “computer sience” instead (without the “c” in “science”) then the spelling correction kicks in, returning “computer science” as its suggested query. UT search displays the following:"
    },
    {
      "title": "Query suggestions without tracking users: Related queries",
      "url": "http:\/\/searsia.org\/blog/2017-03-18-query-suggestions-without-tracking-users/index.html#related-queries",
      "description": "Suppose the user now selects the corrected query “computer science”, then the search engine might show related queries, such as “Electrical Engineering Mathematics and Computer Science” and “science and technology” as follows. No rocket science either, you have probably seen this before in web search. UT search shows:"
    },
    {
      "title": "Query suggestions without tracking users: How to obtain popular query suggestions?",
      "url": "http:\/\/searsia.org\/blog/2017-03-18-query-suggestions-without-tracking-users/index.html#how-to-obtain-popular-query-suggestions",
      "description": "To use searsiasuggest , you need a list of popular query suggestions. How to obtain those suggestions? In practice, search engines often use queries from previous users, i.e. query logs, to return query suggestions. Query logs are very effective in predicting query autocompletions and related queries. If you have a query log for your search engine, then you can effectively use them in searsiasuggest . However, there are many downsides to using query logs. We talked about some of these in last month’s blog post Query autocompletions considered harmful : Query suggestions that use query logs may return offensive and damaging results, and they suffer from a destructive feedback loop, where bad suggestions are mutually reinforced by the search engine and its users. Other downsides might be of a more principled nature: Maybe your organization’s privacy policies do not allow you to log user input and user interactions; or maybe We don’t track you is your organization’s motto and main strategy to distinguish your product from its competitors."
    },
    {
      "title": "Query suggestions without tracking users: Popular queries without logging any queries?",
      "url": "http:\/\/searsia.org\/blog/2017-03-18-query-suggestions-without-tracking-users/index.html#popular-queries-without-logging-any-queries",
      "description": "Inspired by research of Sumit Bhatia, Debapriyo Majumdar, and Prasenjit Mitra , Reiner Kraft and Jason Zien , and Van Dang and Bruce Croft , we decided to obtain our query suggestions from the anchor text of web pages, i.e., the text that you click on in hyperlinks. We collected more than 1 million web pages for the domain utwente.nl and extracted about 200,000 unique query suggestions from the anchor text of those web pages. UT Search receives currently about 1000 queries per day on average (including repeats), so collecting that many unique queries from user logs will likely take several years. We described the procedure in: Collecting Data for Query Suggestions: a poor person’s approach ."
    },
    {
      "title": "Query suggestions without tracking users: The quality of query suggestions from anchors",
      "url": "http:\/\/searsia.org\/blog/2017-03-18-query-suggestions-without-tracking-users/index.html#the-quality-of-query-suggestions-from-anchors",
      "description": "Are query suggestions from anchor text any good compared to query suggestions from query logs? To check this, we used the query log of Greg Pass, Abdur Chowdhury, and Cayley Torgeson , which contains 20 million queries submitted by about 650,000 users to the AOL search engine between March and May in 2006. Following the recent query autocompletion experiments by Fei Cai, Shangsong Liang, and Maarten de Rijke , we used queries submitted before 8 May 2006 as train queries and queries submitted afterwards as test queries. We removed queries containing URL substrings ( http: , https: , www. , .com , .net , .org , and .edu ) from both training and test queries. We did not further filter the data ( Fei Cai et al. only kept queries appearing in both partitions). Because we are not interested in personalization, we put 99% of the users in the training data, and the remaining 1% of the users in the test data. This leaves more than 3.3 million unique training queries for searsiasuggest and 952 queries for testing the system. For every test query, we used 10 different prefixes as input to searsiasuggest : 1 to 5 characters, and 1 to 5 words. If the query has less than 5 characters or less than 5 words, we take the full query as input. For each prefix we measured the mean reciprocal rank of the position for which searsiasuggest returns the full test query. The mean reciprocal rank is calculated as one divided by the position of the correct results, so it will be 1 if the correct result is returned first, 0.5 if it is returned second, etc. We also measured the average number of results returned for each prefix. The results are presented in Table 1. Table 1, Quality of query autocompletions using query logs Prefix MRR Returned 1 char 0.026 10.00 2 char 0.072 10.00 3 char 0.135 9.99 4 char 0.181 9.71 5 char 0.227 9.28 1 word 0.271 8.15 2 word 0.354 4.40 3 word 0.365 3.30 4 word 0.365 3.06 5 word 0.366 3.04 Table 1 shows that after typing 3 characters the MRR is 0.135, so the correct suggestion is on average available in the top 8 results (1\/8 = 0.125). After typing 1 word, the MRR is 0.271, i.e., on average the correct suggestion is available in the top 4 results. The script evaluate.py is provided to compute the evaluation retults. For anchor text completions we ideally would need a large web crawl from 2006 (the year of the query log). In absence of such a crawl, we used data from ClueWeb09 , a web crawl of more than 1 billion pages crawled in January and February 2009 by researchers at Carnegie Mellon University. Anchor texts for the English pages in this collection (about 0.5 billion pages) are readily available, so we do not actually need to process the ClueWeb09 web pages themselves. Anchor texts with the separators ( . , ? , ! , | , - or ; ) followed by a space were split in multiple strings. Text in braces () , {} , [] was removed from the strings. We processed the anchor texts by retaining only suggestions that occur at least 15 times. This resulted in 46 million unique suggestions. Performance of the ClueWeb09 anchor text suggestions is presented in Table 2. Table 2, Quality of query autocompletions using anchor texts Prefix MRR Returned 1 char 0.006 10.00 2 char 0.025 10.00 3 char 0.066 10.00 4 char 0.123 9.92 5 char 0.180 9.71 1 word 0.251 8.62 2 word 0.415 5.42 3 word 0.440 3.95 4 word 0.443 3.67 5 word 0.443 3.64 The results show that for queries of 2 words or more (the average query length in the test data is 2.6), anchor text autocompletions perform better than query log autocompletions, up till an MRR of 0.443 (0.366 for query logs). Query log autocompletions perform better for shorter queries: Anchor text autocompletions need about one character more than query log autocompletions to achieve a similar MRR for the first 5 characters."
    },
    {
      "title": "Query suggestions without tracking users: Conclusion",
      "url": "http:\/\/searsia.org\/blog/2017-03-18-query-suggestions-without-tracking-users/index.html#conclusion",
      "description": "Query autocompletions based on anchor text from web pages perform remarkably well. For queries of more than 1 word, they outperform autocompletions that are based on over two months of query log data. Simply extracting all anchor texts is really only a first attempt to get well-performing autocompletions from web content. Ideas to improve suggestions are: Using linguistic knowledge to get suggestions from all web page text (for instance using the Stanford CoreNLP tools ), using web knowledge like PageRank scores and Spam scores to improve the quality of suggestions, and reranking of suggestions by their “query-ness” using machine learning. But for now, please enjoy the query suggestions from searsiasuggest ."
    },
    {
      "title": "Query suggestions without tracking users: Acknowledgments",
      "url": "http:\/\/searsia.org\/blog/2017-03-18-query-suggestions-without-tracking-users/index.html#acknowledgments",
      "description": "We are grateful to the Vietsch Foundation and NLnet Foundation for funding our work on query suggestions. Tags: autocompletions &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "A search engine in your browser: A full-fledged search engine in the browser",
      "url": "http:\/\/searsia.org\/blog/2017-04-21-search-engine-in-your-browser/index.html#a-full-fledged-search-engine-in-the-browser",
      "description": "Search engines use inverted files to quickly search in lots of documents. An inverted file operates much like the index in the back of a book that lists for each important term the pages that describe the term. Similarly, an inverted file lists for every word the web pages that contain the word. This allows a search engine to quickly select the pages for your query. A full-fledged inverted file search engine for the browser is provided by Sphinx , the Python Documentation Generator. While generating the documentation, Sphinx also generates a JavaScript file called searchindex.js which contains the inverted file. Before searching the documentation, the file is downloaded to the browser to provide search results in only milliseconds. A similar approach is taken by Lunr.js . Lunr is completely written in JavaScript. It provides indexing functionality, a powerful query language, and it runs both in the browser as server-side with node.js. Lunr’s standard mode of operation builds the entire index in the browser, but it also offers a way for downloading pre-built indexes similar to Sphinx. Another remarkable example of an inverted file search engine for the browser is JScene , a proof-of-concept search engine developed by Jimmy Lin. Lin (2015) pushed JScene to its limits by searching 1.1 million tweets in milliseconds on a Mac-book Pro (containing an i7 processor and 16 GB of RAM). Although awesome from a technical perspective, searching that many documents is not yet practical. JScene took more than 10 hours to create a massive 1.8 gigabyte index from 140 megabytes of tweets. The pre-built index would need to be downloaded to the browser before the querying can start (and most certainly would crash our crappy smart phone). So, while searching millions of pages might not be practical yet in the web browser, searching less than a few thousand pages certainly is. This is useful for the many smaller web sites that are out there: personal blogs, sites with software documentation, sites of small and medium-sized enterprises, and yes, the great Cranfield collection."
    },
    {
      "title": "A search engine in your browser: Searsia’s linear search in the browser",
      "url": "http:\/\/searsia.org\/blog/2017-04-21-search-engine-in-your-browser/index.html#searsias-linear-search-in-the-browser",
      "description": "Searsia is all about delegating search to other search engines. So why would Searsia support in-browser search? The reason is that in practice, the search quality of some engines in a federated search engine might not be that good. In such cases, Searsia provides the possibility to add the “rerank” attribute to a search engine definition, indicating that Searsia should rerank the results returned by the search engine. This works particularly well if the low-quality search engine provides a large result set, for instance the top 500 most recent news events. Reranking might be done server-side (by searsiaserver ) or in the browser (by searsiaclient ). In both cases, building an inverted index is useless, because the low quality search engine might provide different low quality results for each query. Instead, Searsia simply scans over each result to output a reranked top X of high quality search results to the user. Constructing the inverted file would be much more costly: In addition to scanning each document it has to do a complete sort of all term-document pairs. As an interesting side-effect of Searsia’s in-browser linear search approach, users can create a static Searsia search result file, like a “search engine” that always gives the same search results. Obviously, the quality of search engines get not much lower than that. However, if we now define a search engine with the rerank attribute that always takes the static results, then the resulting search engine is pretty good, especially if all pages are included in the static search results. This is how to make the Cranfield search demo: The search engine definition and search results are defined in a single configuration file cran.json ."
    },
    {
      "title": "A search engine in your browser: Private search",
      "url": "http:\/\/searsia.org\/blog/2017-04-21-search-engine-in-your-browser/index.html#private-search",
      "description": "In-browser search comes with an interesting benefit that solves some of the privacy concerns of search engines that we discussed in a previous blog post. If search happens inside your browser, then your query does not need to leave your private machine, ever. This way, the site owner cannot learn what you searched for, and you can safely search for private information concerning for instance your health, sexual preferences, or financial situation. Private search using Searsia is demonstrated by NLnet Search . Here, the client uses URL fragments (the part after the hash symbol # ) to encode the queries. That part of the URL is not send to the web server, so NLnet will not find out what you search for. To experience private search, do a single search on NLnet, and then turn off the wifi on your phone or laptop: Searching should still work without an internet connection. Of course, once you click on a search result, the site will get some indication of what you searched for, but at least your queries are not leaked to the site owners. No chance they end up in some autocompletion feature ."
    },
    {
      "title": "A search engine in your browser: Conclusion",
      "url": "http:\/\/searsia.org\/blog/2017-04-21-search-engine-in-your-browser/index.html#conclusion",
      "description": "In-browser search engines are feasible for small collections of up to a few thousand pages. They are easy to deploy and work on static web sites that do not handle any server-side processing. Their functionality is great from a privacy-perspective. Your browser downloads an inverted index or a static search result file, and it searches inside your own machine. The site that you are searching will not find out what you searched for. Please note, Searsia’s in-browser search is still experimental and largely undocumented. The implementation in the v1 branch on Github is much better than the master branch, and it will be further improved in the near future. We will provide more guidelines and documentation once we release version 1.0.0 of Searsia. In the meantime, contact us if you need help trying out Searsia’s in-browser search."
    },
    {
      "title": "A search engine in your browser: References",
      "url": "http:\/\/searsia.org\/blog/2017-04-21-search-engine-in-your-browser/index.html#references",
      "description": "Cyril Cleverdon , Wikipedia. Download the Cranfield collection , University of Glasgow. Inverted index , Wikipedia. Sphinx , Python Documentation Generator. Lunr , Welcome to Lunr. JScene JScene Demo. Jimmy Lin. Building a Self-Contained Search Engine in the Browser Proceedings of the ACM International Conference on the Theory of Information Retrieval (ICTIR) , pages 309-312, 2015. NLnet Search Tags: privacy &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Some thoughts on search advertising: Advertisers and publishers",
      "url": "http:\/\/searsia.org\/blog/2017-05-26-some-thoughts-on-search-advertising/index.html#advertisers-and-publishers",
      "description": "If you plan to put advertisements along-side your search results, then the terminology used in online advertising can be confusing. The Wikipedia page on on-line advertising distinguishes advertisers that buy advertisement space and publishers that sell advertisement space. Obviously, if you are building a search engine that displays ads, then you are a publisher — even though a search engine merely directs users to the real publishers. As a publisher\/seller you will interact with advertisers\/buyers through an advertising network , a company that connects advertisers to publishers."
    },
    {
      "title": "Some thoughts on search advertising: Advertising platforms",
      "url": "http:\/\/searsia.org\/blog/2017-05-26-some-thoughts-on-search-advertising/index.html#advertising-platforms",
      "description": "Online advertising is highly automated on platforms that facilitate the buying and selling of advertisement space. Such platforms, often called ad exchanges , serve multiple ad networks. Platforms are increasingly specializing towards either buying ad space or selling ad space, in which case they are called demand-side platforms or supply-side platforms . Platforms determine the prices of the advertisement space through bidding : Advertisers bid on advertisement space by deciding what they are willing to pay for each impression of their ad or for each click on their ad."
    },
    {
      "title": "Some thoughts on search advertising: Real-time bidding",
      "url": "http:\/\/searsia.org\/blog/2017-05-26-some-thoughts-on-search-advertising/index.html#real-time-bidding",
      "description": "This bidding process within an ad exchange can be very dynamic. In real-time bidding , advertising space is bought and sold on a per-impression basis. Real-time bidding sounds fascinating, but it is really a search: The platform searches the best advertisement based on various pieces of data, such as the user’s demographic information, browsing history, and location. The more accurate the behavioral targeting of users, the more the advertisement network earns. That’s why networks track users online. They profile users by “following” them around to gather as much data on users as possible. This way, when a user reads an article on a publisher’s web site, say a real publisher like a newspaper, the advertisement network can guess what advertisement the user is willing to click, and ultimately what product a user is willing to buy."
    },
    {
      "title": "Some thoughts on search advertising: Real-time bidding without tracking",
      "url": "http:\/\/searsia.org\/blog/2017-05-26-some-thoughts-on-search-advertising/index.html#real-time-bidding-without-tracking",
      "description": "Real-time bidding for search engines is much easier than real-time bidding for a newspaper site: Users of search engines tell the search engine explicitly what they are willing to click on. What would be a good ad for the query “car”? Right, an ad for the Tesla Model 3, for instance! There is absolutely no real need to track users for search ads. DuckDuckGo describes this aptly on the DuckDuckGo company pages : It is a myth that search engines need to track you to make money on Web search. When you type in a search, we can show an ad just based on that search term. For example, if you type in, “car” we show a car ad. That doesn’t involve tracking because it is based on the keyword and not the person."
    },
    {
      "title": "Some thoughts on search advertising: OpenRTB: Open Real-Time Bidding",
      "url": "http:\/\/searsia.org\/blog/2017-05-26-some-thoughts-on-search-advertising/index.html#openrtb-open-real-time-bidding",
      "description": "Interestingly, there is an open standard for real time bidding called OpenRTB . OpenRTB was launched in late 2010 by six companies in online advertising, representing both demand-side and supply-side platforms. The standard is actively maintained by the Interactive Advertising Bureau ( IAB ), and its latest version, OpenRTB version 2.5 , was released in December 2016. Many advertisement platforms support OpenRTB, usually version 2.3, which is currently the most widely adopted release. Examples are SSPHWY , DataXu , OpenX , BrightRoll (by Yahoo), DoubleClick (by Google), and RythmOne that claimed last week that it provides the first IAB certified implementation of OpenRTB."
    },
    {
      "title": "Some thoughts on search advertising: OpenRTB Native ads",
      "url": "http:\/\/searsia.org\/blog/2017-05-26-some-thoughts-on-search-advertising/index.html#openrtb-native-ads",
      "description": "One of the biggest changes in OpenRTB version 2.3 compared to previous versions is the support for native advertising. Native advertising provides ads that match the form and function of the site on which they appear. One of the main examples of native ads are search ads : ads that appear within search result pages. The difference between native ads and traditional display ads comes down to metadata. Display ads, such as the traditional banner ad, need only an image of predefined size. Native ads however, provide several separate pieces of information like a title, a summary, a thumbnail image, and the brand’s logo. This way, its appearance can be tailored to a publisher’s content feed or a search engine’s result page. Of course, advertisements should always be clearly marked such that they are recognized as paid content by the users. OpenRTB comes with a separate specification for native ads, OpenRTB Native 1.2 , which contains a detailed explanation of the sub-protocol of the OpenRTB real-time bidding interface for native ads."
    },
    {
      "title": "Some thoughts on search advertising: Conclusion",
      "url": "http:\/\/searsia.org\/blog/2017-05-26-some-thoughts-on-search-advertising/index.html#conclusion",
      "description": "To conclude, on-line advertising using real-time bidding sounds fancy, but it really is just the advertisement platform searching its ads database for the best ad for a single impression. Furthermore, real-time bidding for a search site is more easy than real-time bidding for many other sites, because the advertisement network can show an ad based on the user’s search query, without the need to track the user. Finally, there is an open standard for real-time bidding, fittingly called OpenRTB, that is used by many advertising networks and that includes a detailed subprotocol for native search ads. At Searsia, we are currently investigating how to deliver native search ads using the OpenRTB standard. Stay tuned if you want to monetize your Searsia federated search engine. Tags: advertisements &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    },
    {
      "title": "Privacy implications of federated search: Leakage via images",
      "url": "http:\/\/searsia.org\/blog/2017-10-02-privacy-implications-of-federated-search/index.html#leakage-via-images",
      "description": "Search engines in the federation might return thumbnail images in their search results. These images are not provided directly, but by means of the URL of the image. When the Searsia client retrieves the image to display it in the search results, it will send the privacy sensitive information mentioned above (cookies, user-agent string, IP number) to a third party site. The third party site can be the search engine in the federation that provided the image URL, or any other other site for that matter. Directly downloading images has another downsite: These images might only be available over an insecure connection (HTTP instead of HTTPS), thereby creating a mixed-content page, where part of the page is not secure. Although web browsers like Firefox will still display images in mixed-content pages, they also display a warning icon in the address bar."
    },
    {
      "title": "Privacy implications of federated search: Leakage via clicks",
      "url": "http:\/\/searsia.org\/blog/2017-10-02-privacy-implications-of-federated-search/index.html#leakage-via-clicks",
      "description": "Whenever the user visits a web site, for instance by clicking on a search result, the user will obviously share some identifying information with that site. In some cases, this information might include the user’s search terms: Search leakage is the “transmission of a user’s search terms to the site in the search results that the user chooses to visit”. Leakage of the user’s search terms may occur because of the HTTP referrer header. Browsers that run the Searsia client will send this referrer header — possibly including the query — to the site that the user wants to visit. Leakage of the user’s search terms might be the biggest threat to privacy in this list, because users share intimate details with search engines. Users might search information about their health, about their sexual preferences, or about their financial situation. It is therefore important to annonymize queries properly."
    },
    {
      "title": "Privacy implications of federated search: Leakage via advertisements",
      "url": "http:\/\/searsia.org\/blog/2017-10-02-privacy-implications-of-federated-search/index.html#leakage-via-advertisements",
      "description": "At Searsia we are investigating how to add advertisements to our search results without leaking information. Most on-line advertisement networks will instruct publishers that want to display advertisements to include Javascript in their page or they instruct publishers to load an external Javascript file (or both). Obviously in such cases, not only downloading the Javascript file leaks privacy information, but it additionally runs third-party code in the user’s browser to further monitor the user’s behaviour. For instance, advertising networks use web beacons to check if the advertisement is viewable or mouse Tracking to check if they are hovered or clicked. As an example of the requirements of advertisement networks, Yahoo’s Native ads for the web shows the kind of code that has to be included in a web site to allow Yahoo displaying advertisements. It also shows the use of a viewability beacon : A call to Yahoo to indicate that the advertisement is visible on the site."
    },
    {
      "title": "Privacy implications of federated search: How Searsia prevents privacy leakage",
      "url": "http:\/\/searsia.org\/blog/2017-10-02-privacy-implications-of-federated-search/index.html#how-searsia-prevents-privacy-leakage",
      "description": "Searsia version 1.0 prevents privacy leakage as follows: Leakage via images will be prevented by adding an option that lets the Searsia server also forward the images. This way, it serves as a proxy for images and additionally provides secure web connections if the Searsia server is served over HTTPS. Leakage via clicks is prevented by the a Referrer Policy meta header in Searsia’s client. The client will use the default policy ‘ no-referrer ’, so it will not share any referrer information. This can be changed to for instance 'origin' to send only the first part of the URL without the query string. Leakage via advertisements, finally, cannot be prevented easily, unless the advertisement networks allow the Searsia server to anonymize all the user interactions with the advertisements. This is ongoing work, and we will spend a future blog posts on advertisements without privacy leakage. Tags: advertisements, privacy &larr; Previous Post Next Post &rarr; Searsia  &bull;  2017 Theme by beautiful-jekyll if (typeof jQuery == 'undefined') { document.write(' '); }"
    }
  ],
  "resource": {
    "id": "searsia",
    "mimetype": "application\/searsia+json",
    "favicon": "http:\/\/searsia.org\/images\/searsia.png",
    "banner": "http:\/\/searsia.org\/images\/banner.png",
    "name": "Searsia",
    "rerank": "lm",
    "apitemplate": "http:\/\/searsia.org\/searsia\/search.json",
    "usertemplate": "http:\/\/searsia.org\/searsiaclient\/search.html?q={q}"
  },
  "searsia": "v1.0.0"
}
